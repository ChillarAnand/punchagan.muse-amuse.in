<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Noetic Nought (python)</title><link>https://punchagan.muse-amuse.in/</link><description></description><atom:link type="application/rss+xml" rel="self" href="https://punchagan.muse-amuse.in/tags/python.xml"></atom:link><language>en</language><lastBuildDate>Sun, 13 Dec 2015 08:20:33 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Playing music using mpsyt from Emacs</title><link>https://punchagan.muse-amuse.in/posts/playing-music-using-mpsyt-from-emacs.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I've started using the wonderful &lt;a href="https://github.com/np1/mps-youtube/"&gt;mpsyt&lt;/a&gt; to play any music from youtube, since
I'm not really interested in the video.  But, since I use emacs for chat/IRC, I
end up getting youtube links into emacs and opening them opens them up in my
browser. I ended up writing some &lt;code&gt;elisp&lt;/code&gt; to play the songs from within an
instance of &lt;code&gt;mpsyt&lt;/code&gt; running inside an emacs buffer.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/short-url-at-point&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Gets the short url at point.&lt;/span&gt;

&lt;span class="s"&gt;This function is required only because&lt;/span&gt;
&lt;span class="s"&gt;`thing-at-point-url-at-point' ignores urls (without a scheme)&lt;/span&gt;
&lt;span class="s"&gt;that don't start with www."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;bounds&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thing-at-point-bounds-of-url-at-point&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;bounds&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="nv"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr&lt;/span&gt; &lt;span class="nv"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-substring-no-properties&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="nv"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr&lt;/span&gt; &lt;span class="nv"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/mpsyt-url&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mpsyt-proc-name&lt;/span&gt; &lt;span class="s"&gt;"*mpsyt*"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;;; Start a new term with *mpsyt* if there isn't one&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-process&lt;/span&gt; &lt;span class="nv"&gt;mpsyt-proc-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-buffer&lt;/span&gt; &lt;span class="nv"&gt;mpsyt-proc-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kill-buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-buffer&lt;/span&gt; &lt;span class="nv"&gt;mpsyt-proc-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ansi-term&lt;/span&gt; &lt;span class="s"&gt;"mpsyt"&lt;/span&gt; &lt;span class="s"&gt;"mpsyt"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;;; Play given url in mpsyt&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;mpsyt-proc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-process&lt;/span&gt; &lt;span class="nv"&gt;mpsyt-proc-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="c1"&gt;;; If something is already playing, stop it and play this...&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;term-send-string&lt;/span&gt; &lt;span class="nv"&gt;mpsyt-proc&lt;/span&gt; &lt;span class="s"&gt;"\n\n\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;;; We wait for a bit, since looking for the prompt seems to fail, sometimes?&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sleep-for&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;term-send-string&lt;/span&gt; &lt;span class="nv"&gt;mpsyt-proc&lt;/span&gt; &lt;span class="s"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;;; Actually send the command to playurl&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;term-simple-send&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-process&lt;/span&gt; &lt;span class="nv"&gt;mpsyt-proc-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"playurl %s"&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/mpsyt-url-at-point&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Play the URL at point using mpsyt."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url-get-url-at-point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pc/short-url-at-point&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"No URL found"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"Playing %s with mpsyt"&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pc/mpsyt-url&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The current version of mpsyt crashes when run from inside emacs due to a bug in
the code to get the terminal size, which should be fixed once this &lt;a href="https://github.com/np1/mps-youtube/pull/247"&gt;patch&lt;/a&gt; is
merged.
&lt;/p&gt;

&lt;p&gt;
I would've expected &lt;code&gt;thing-at-point-url-at-point&lt;/code&gt; to be able to find urls even
when they don't have a schema, but it tries to guess the schema from urls and
fails to work when the url starts with &lt;code&gt;youtube.com&lt;/code&gt; instead of
&lt;code&gt;www.youtube.com&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
I started off using the command-line interface of &lt;code&gt;mpsyt&lt;/code&gt; by running it using
&lt;code&gt;shell-command&lt;/code&gt; or &lt;code&gt;start-process&lt;/code&gt;.  But, it seemed useful to have a buffer of
&lt;code&gt;mpsyt&lt;/code&gt; to switch to â€“ easier to search for new music, repeating songs, etc.
Not all tasks/actions are achievable through &lt;code&gt;mpsyt&lt;/code&gt;'s command line args.
&lt;/p&gt;

&lt;p&gt;
I ended up writing more code than I thought I would have to&lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="https://punchagan.muse-amuse.in/posts/playing-music-using-mpsyt-from-emacs.html#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;.  But, I'm
pretty happy with how this all works, right now.
&lt;/p&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="https://punchagan.muse-amuse.in/posts/playing-music-using-mpsyt-from-emacs.html#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
- Isn't it true, more often than not?
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>blag</category><category>emacs</category><category>mpsyt</category><category>python</category><guid>https://punchagan.muse-amuse.in/posts/playing-music-using-mpsyt-from-emacs.html</guid><pubDate>Mon, 20 Apr 2015 18:17:18 GMT</pubDate></item><item><title>Recurse Center, 2014-08-27</title><link>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-27.html</link><dc:creator>punchagan</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;I spent the whole of yesterday just working on the LED-bot.
&lt;/li&gt;
&lt;li&gt;Spent some time cleaning up meta-stuff about the project, making it a real
package, adding a setup.py, added LICENSE &amp;amp; AUTHOR files, etc.
&lt;/li&gt;
&lt;li&gt;I found it really frustrating that there's no good/standard way to remove
duplication of information between pip's &lt;code&gt;requirements.txt&lt;/code&gt; and
&lt;code&gt;install_requires&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We got the bot running on the Beagle Bone, but it turned out to be too slow.
After some playing around with trying to get rid of Python for-loops, I was
able to use PIL's &lt;code&gt;image.tobytes&lt;/code&gt; and some image cropping to get the data to
be sent to the LEDs, and it sped up the display quite a bit.
&lt;/li&gt;
&lt;/ul&gt;</description><category>PIL</category><category>python</category><category>recursecenter</category><guid>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-27.html</guid><pubDate>Thu, 28 Aug 2014 13:51:30 GMT</pubDate></item><item><title>Recurse Center, 2014-08-26</title><link>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-26.html</link><dc:creator>punchagan</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;I spent most of the day refactoring the code for the LED Bot, and am happy
with the way it looks right now.
&lt;/li&gt;
&lt;li&gt;My talk at Hack and Tell went OK.  I was distracted by &lt;a href="https://github.com/damianavila/live_reveal"&gt;live&lt;sub&gt;reveal&lt;/sub&gt;&lt;/a&gt; not
displaying properly on the smaller resolution, and not being able to mirror
screens!
&lt;/li&gt;
&lt;li&gt;There were a bunch of interesting talks presented by the
others. &lt;a href="http://comparea.org"&gt;http://comparea.org&lt;/a&gt;, &lt;a href="https://medium.com/@vijayp/of-taxis-and-rainbows-f6bc289679a1"&gt;Taxis and Rainbows&lt;/a&gt; were the most interesting
ones for me.
&lt;/li&gt;
&lt;/ul&gt;</description><category>python</category><category>recursecenter</category><guid>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-26.html</guid><pubDate>Wed, 27 Aug 2014 14:23:27 GMT</pubDate></item><item><title>Recurse Center, 2014-08-20</title><link>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-20.html</link><dc:creator>punchagan</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;I finished going through the third of Dave Beazley's tutorials on Generators
and Co-routines.
&lt;/li&gt;
&lt;li&gt;Also refactored api-diff to use astroid, instead of the ast module.  Kinda
happy with what I have, for now. May be more, laterâ€¦
&lt;/li&gt;
&lt;/ul&gt;</description><category>python</category><category>recursecenter</category><guid>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-20.html</guid><pubDate>Sat, 23 Aug 2014 02:43:04 GMT</pubDate></item><item><title>Recurse Center, 2014-08-21</title><link>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-21.html</link><dc:creator>punchagan</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;I added an additional view to xtab, to see all the pages that were killed,
and reopen them, if you so choose.
&lt;/li&gt;
&lt;li&gt;Also, cleaned up the &lt;code&gt;api-diff&lt;/code&gt; project and renamed it to &lt;a href="https://github.com/punchagan/what-changed"&gt;what-changed&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;Started thinking about building the GitHub organization dashboard, that I
thought would be interesting to have, since the 1st or 2nd week of Hacker
School.
&lt;/li&gt;
&lt;li&gt;A bunch of awesome thursday presentations, and job fair and awesome food by
Chef Warren!
&lt;/li&gt;
&lt;/ul&gt;</description><category>jobs</category><category>python</category><category>recursecenter</category><guid>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-21.html</guid><pubDate>Fri, 22 Aug 2014 14:33:34 GMT</pubDate></item><item><title>Recurse Center, 2014-08-19</title><link>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-19.html</link><dc:creator>punchagan</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;I spent most of the day working through David Beazly's tutorials on
generators and coroutines, and it was mind bending.
&lt;/li&gt;
&lt;li&gt;I learnt about &lt;code&gt;send&lt;/code&gt; and &lt;code&gt;throw&lt;/code&gt; methods on generators!  I hadn't heard of
them before, and was totally surprised to come across them.
&lt;/li&gt;
&lt;li&gt;I spent a little time late in the day getting class diffs working, and
refactoring the api-diff tool to remove duplication of code between classes
and modules. But, not very happy with the way I did it.
&lt;/li&gt;
&lt;/ul&gt;</description><category>python</category><category>recursecenter</category><guid>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-19.html</guid><pubDate>Wed, 20 Aug 2014 22:06:53 GMT</pubDate></item><item><title>Recurse Center, 2014-08-18</title><link>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-18.html</link><dc:creator>punchagan</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;I refactored the API-diff code, and am pretty happy with what I have right
now, and need to add support for diffing Classes. I'm considering using
&lt;a href="http://www.astroid.org"&gt;Atstroid&lt;/a&gt; instead of Python's &lt;code&gt;ast&lt;/code&gt; module, since some of the work that I want
to do, has already been done for me.
&lt;/li&gt;
&lt;li&gt;With the white-boarding group, we worked on a set of simple exercises for
strings and arrays.
&lt;/li&gt;
&lt;li&gt;JosÃ© Valim's presentation on Elixir was interesting and got me reading up a
stuff about concurrency, and related stuff.  Thanks!
&lt;/li&gt;
&lt;/ul&gt;</description><category>elixir</category><category>python</category><category>recursecenter</category><guid>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-18.html</guid><pubDate>Tue, 19 Aug 2014 17:11:49 GMT</pubDate></item><item><title>Recurse Center, 2014-08-17</title><link>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-17.html</link><dc:creator>punchagan</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Friday&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Updated my HS profile page with projects that I worked on, and a short bio.
&lt;/li&gt;
&lt;li&gt;Joined the group discussing algorithmic complexity
&lt;/li&gt;
&lt;li&gt;Submitted a pull request to blaggregator to fix issues with broken profile
images.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Saturday &amp;amp; Sunday&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
I almost didn't write any code during the weekend.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>python</category><category>recursecenter</category><guid>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-17.html</guid><pubDate>Tue, 19 Aug 2014 01:59:07 GMT</pubDate></item><item><title>Recurse Center, 2014-08-14</title><link>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-14.html</link><dc:creator>punchagan</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;I spent the morning cleaning up the "repr" functions of the diff classes, so
that the diff of functions between two modules can be printed out in a
somewhat meaningful way.
&lt;/li&gt;

&lt;li&gt;I spent most of the afternoon, preparing to make a small presentation on how
&lt;code&gt;sys.path&lt;/code&gt; works in Python.  I thought I didn't do as good a job of it, as I
would've liked, but Tom thought it was not too badâ€¦
&lt;/li&gt;

&lt;li&gt;Looks like another of those days, where I didn't get much doneâ€¦  I spent
the evening finishing off &lt;a href="http://craphound.com/homeland/"&gt;Homeland&lt;/a&gt;. It's a brilliant book, and everyone who
cares about the Government and policies and technology MUST read it!  Thanks
Cory.
&lt;/li&gt;
&lt;/ul&gt;</description><category>python</category><category>recursecenter</category><guid>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-14.html</guid><pubDate>Fri, 15 Aug 2014 22:09:59 GMT</pubDate></item><item><title>Recurse Center, 2014-08-13</title><link>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-13.html</link><dc:creator>punchagan</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;I feel like I didn't get much done yesterday.
&lt;/li&gt;
&lt;li&gt;I mostly worked on the API differ, but didn't get much done.  I have a few
tests, and some code for diffing two functions, but I'm not very happy with
it.
&lt;/li&gt;
&lt;li&gt;I helped Giorgio and Carlos with using my client only &lt;code&gt;hs_oauth&lt;/code&gt;
  script/library, for their Zulip bot.
&lt;/li&gt;
&lt;li&gt;The white boarding group worked on some binary related problems, and it was
fun.
&lt;/li&gt;
&lt;li&gt;I looked at how the HS OAuth backend works on blaggregator and thought about
how to go about fixing the issue of broken images on the site.  The problem
happens because the image URLs are returned from the HS API calls, that are
made whenever a user logs in(?), and the URLs are cached.  Since, HS uses
cloudfront for its assets, the URLs expire after a period of time, and the
cached urls in blag's database need to be updated.  There could be two ways
of doing it -
&lt;ol class="org-ol"&gt;
&lt;li&gt;Check if the URL 404s, every time a URL is requested, on the server side.
&lt;/li&gt;
&lt;li&gt;Do it on the client side, with some javascript magic.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Intuitively, I feel like 2. would be better, but Madhu suggested
that 1. wouldn't be that bad either.  We could try both out, and see which
works better I suppose.
&lt;/p&gt;

&lt;p&gt;
I'd be interested to try this out, sometime.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>python</category><category>recursecenter</category><guid>https://punchagan.muse-amuse.in/posts/recurse-center-2014-08-13.html</guid><pubDate>Thu, 14 Aug 2014 15:11:59 GMT</pubDate></item></channel></rss>