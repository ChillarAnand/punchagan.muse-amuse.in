<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Noetic Nought (learning)</title><link>https://punchagan.muse-amuse.in/</link><description></description><atom:link rel="self" type="application/rss+xml" href="https://punchagan.muse-amuse.in/tags/learning.xml"></atom:link><language>en</language><lastBuildDate>Thu, 05 May 2016 13:03:51 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>org-drill for making it stick!</title><link>https://punchagan.muse-amuse.in/posts/org-drill-for-making-it-stick.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
Those who read the &lt;a href="http://punchagan.muse-amuse.in/posts/learning-to-use-org-drill.html"&gt;last&lt;/a&gt; &lt;a href="http://punchagan.muse-amuse.in/posts/learning-about-spaced-repetition-supermemo-org-drill-et-al.html"&gt;few&lt;/a&gt; &lt;a href="http://punchagan.muse-amuse.in/posts/more-input-sources-for-org-drill.html"&gt;posts&lt;/a&gt; here, would know that I have been
experimenting with &lt;a href="http://orgmode.org/worg/org-contrib/org-drill.html"&gt;org-drill&lt;/a&gt; (a spaced repetition extension to &lt;a href="http://orgmode.org/"&gt;Org mode&lt;/a&gt;).  I
have been using the system (almost) religiously for the past 2 months, and I do
find that it has helped a great deal! (in some respects).  I have also spent a
considerable amount of time trying to reduce the friction to put new stuff into
the system, and am constantly on the look out for further improvements.
&lt;/p&gt;

&lt;p&gt;
Using this system has definitely helped with retention, and I find that I can
recall quite a few things I have read a few weeks ago, that I would normally
have been unable to. Though, I can recall a lot of information, I have been
having a feeling of "fragmentation": the feeling of just retaining individual
bits/fragments of information, while losing out on actually internalizing the
knowledge; not seeing the big picture, etc.
&lt;/p&gt;

&lt;p&gt;
Wozniak (the author of super-memo) &lt;a href="http://www.supermemo.com/articles/20rules.htm"&gt;warns against&lt;/a&gt; learning without
understanding, and memorizing before actually learning stuff.  I haven't
consciously added stuff into the system that I didn't understand (when I added
it), but, later it does feel like I have lost some connections or the
understanding, and am only holding onto the fragments of information.
&lt;/p&gt;

&lt;p&gt;
The problems as explained in (read: as interpreted by me from) &lt;a href="http://www.amazon.com/Make-Stick-Science-Successful-Learning/dp/0674729013/ref=sr_1_1/188-6768042-2821103?ie=UTF8&amp;amp;qid=1421439099&amp;amp;sr=8-1&amp;amp;keywords=make+it+stick&amp;amp;pebp=1421439103302&amp;amp;peasin=674729013"&gt;Make it Stick&lt;/a&gt;
appear to be:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;The understanding (if any) at the time of adding stuff into the
spaced-repetition system is untested.  It may just be familiarity
masquerading as understanding.
&lt;/li&gt;

&lt;li&gt;The lack of any spaced repetitions for the overall concept/understanding and
actual repetitions only for individual bits doesn't help retention of the
understanding (even if there was any, in the first place).
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
To work around this, I'm going to try adding questions that test understanding,
to the system.  The Super-memo team strongly recommends keeping the drill items
small and easy to answer.  This may be helpful in keeping each drill session
short, but I would really like to add conceptual questions to the system, and
see how it goes. I hacked &lt;code&gt;org-drill&lt;/code&gt; to allow me to type out answers, before
looking at the "correct" ones.  This is an adaptation of a system that a fellow
Hacker Schooler uses, and shared.  Also, hopefully forcing myself to type out
the answer will help me get around the problem of sometimes saying "yeah I know
that", then looking at the answer only to reaffirm the feeling of familiarity,
rather than actually testing myself.  I'm still going to continue adding quick
and short questions that test "bits of information", though. But, hopefully the
additional conceptual questions are going to tie things together and help fill
in the gaps.  Lets see how this goes!
&lt;/p&gt;

&lt;p&gt;
For those interested, my hacks to &lt;code&gt;org-drill&lt;/code&gt; below.  The code is really a
hack, and welcome any suggestions on cleaning up the code.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;advice-add&lt;/span&gt; &lt;span class="ss"&gt;'org-drill-presentation-prompt&lt;/span&gt; &lt;span class="ss"&gt;:around&lt;/span&gt; &lt;span class="ss"&gt;'pc/org-drill-presentation-prompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/org-drill-presentation-prompt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;old-fun&lt;/span&gt; &lt;span class="k"&gt;&amp;amp;rest&lt;/span&gt; &lt;span class="nv"&gt;fmt-and-args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"A presentation prompt that allows capturing answers."&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;cb&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;heading&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nth&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-heading-components&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;entry-id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-entry-get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"ID"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="s"&gt;"*org-capture-drill-answer*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;insert&lt;/span&gt; &lt;span class="s"&gt;"# Hit C-c C-c once you are done answering!\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-insert-heading-respect-content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"Answer: %s"&lt;/span&gt; &lt;span class="nv"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-entry-put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"QUESTION_ID"&lt;/span&gt; &lt;span class="nv"&gt;entry-id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;insert&lt;/span&gt; &lt;span class="s"&gt;"  "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-time-stamp-inactive&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;insert&lt;/span&gt; &lt;span class="s"&gt;"\n\n  "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;equal&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ignore-errors&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;execute-kbd-macro&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;read-key-sequence&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="nv"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;apply&lt;/span&gt; &lt;span class="nv"&gt;old-fun&lt;/span&gt; &lt;span class="nv"&gt;fmt-and-args&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;advice-add&lt;/span&gt; &lt;span class="ss"&gt;'org-drill-reschedule&lt;/span&gt; &lt;span class="ss"&gt;:around&lt;/span&gt; &lt;span class="ss"&gt;'pc/org-drill-reschedule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/org-drill-reschedule&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;old-fun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Calls the original reschedule, but also archives the answer"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;prog1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;funcall&lt;/span&gt; &lt;span class="nv"&gt;old-fun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;cb&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-buffer&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="s"&gt;"*org-capture-drill-answer*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pc/org-refile-to-datetree&lt;/span&gt; &lt;span class="s"&gt;"drill.org_archive"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="nv"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kill-buffer&lt;/span&gt; &lt;span class="s"&gt;"*org-capture-drill-answer*"&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'org-datetree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/org-refile-to-datetree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;journal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Refile an entry to journal file's date-tree"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;"fRefile to: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;journal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;expand-file-name&lt;/span&gt; &lt;span class="nv"&gt;journal&lt;/span&gt; &lt;span class="nv"&gt;org-directory&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;date-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-entry-get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"TIMESTAMP_IA"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-entry-get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"TIMESTAMP"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;decode-time&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;date-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-time-string-to-time&lt;/span&gt; &lt;span class="nv"&gt;date-string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
			       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-time&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;date&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nth&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nv"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nth&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nth&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nv"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-cut-subtree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with-current-buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-buffer-visiting&lt;/span&gt; &lt;span class="nv"&gt;journal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-file-noselect&lt;/span&gt; &lt;span class="nv"&gt;journal&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;save-excursion&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-datetree-file-entry-under&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-kill&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;bookmark-set&lt;/span&gt; &lt;span class="s"&gt;"org-refile-last-stored"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"Refiled to %s"&lt;/span&gt; &lt;span class="nv"&gt;journal&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>blag</category><category>emacs</category><category>hack</category><category>hackerschool</category><category>learning</category><category>orgmode</category><guid>https://punchagan.muse-amuse.in/posts/org-drill-for-making-it-stick.html</guid><pubDate>Fri, 16 Jan 2015 19:36:54 GMT</pubDate></item><item><title>More input sources for org-drill</title><link>https://punchagan.muse-amuse.in/posts/more-input-sources-for-org-drill.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I've been trying to use &lt;code&gt;org-drill&lt;/code&gt; regularly for the last few weeks.  I don't
know how well it's been going but I have been sticking to the routine
religiously.  I haven't yet really tried out incremental reading, but in an
attempt to make it as easy as possible, I wanted to have a pdf-reader
integration, and some kind of integration with Kindle highlights.  Browser
integration is pretty straight-forward, thanks to some &lt;a href="http://orgmode.org/worg/org-contrib/org-protocol.html#sec-6"&gt;simple java-script&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I looked for a pdf-reader with some sort of plugin support, but I found nothing
in Evince or Okular.  I thought about &lt;code&gt;pdfjs&lt;/code&gt; but it seemed slightly clunky to
open pdfs in a browser, though I might shift to this if I don't like what I
finally ended up with.  Good old &lt;code&gt;xpdf&lt;/code&gt; seemed to be the only pdf reader that
had some support for custom keybindings that allowed users to run external
commands.  With a &lt;a href="https://github.com/punchagan/dot-emacs/blob/master/xpdf-capture"&gt;little Python&lt;/a&gt;, I was able to setup a work-flow to capture
snippets from &lt;code&gt;xpdf&lt;/code&gt;, to add to org-drill. Custom key-bindings somehow don't
seem to work on &lt;code&gt;xpdf&lt;/code&gt; bundled on Ubuntu. So, I ended up downloading and using
the binary available on the xpdf site.
&lt;/p&gt;

&lt;p&gt;
For Kindle highlights support, with minor updates to Thamer Mahmoud's &lt;a href="https://github.com/punchagan/clip2org"&gt;clip2org&lt;/a&gt;,
I have a simple way of getting all the "new" clippings/highlights as org-drill
headlines.  I haven't really started using this, and once I do, I may end-up
automating even the merging of these items into the org-drill notes file.  I'm
looking forward to making better use of my Kindle, with this feature!
&lt;/p&gt;

&lt;p&gt;
I don't know if it would be useful to have more context information like
section titles/chapter titles when capturing from html/pdf, but it seems like
an interesting problem to try to solve.
&lt;/p&gt;

&lt;p&gt;
Also, it might be easier(?) if I probably tried to have a DE level keybinding, and
some code to get selection and file name of the currently active
window/application.
&lt;/p&gt;</description><category>emacs</category><category>hack</category><category>learning</category><category>orgmode</category><guid>https://punchagan.muse-amuse.in/posts/more-input-sources-for-org-drill.html</guid><pubDate>Tue, 04 Nov 2014 01:55:04 GMT</pubDate></item><item><title>Learning about Spaced Repetition, SuperMemo, Org-drill, et al.</title><link>https://punchagan.muse-amuse.in/posts/learning-about-spaced-repetition-supermemo-org-drill-et-al.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I have been reading a bunch of articles on the SuperMemo site (including the
&lt;a href="http://www.supermemo.com/english/ol.htm"&gt;original thesis&lt;/a&gt; of P. A. Wozniack, the creator of SuperMemo).  I initially
started off trying to understand the algorithms SM2,5 and 8 which org-drill
implements, but reading the articles has given me a lot of general background
and theory on how memory works, and why SuperMemo is as effective as it is (for
those who stick with it).  This blog post is an attempt to summarize and
capture what I have read in all those &lt;a href="http://www.supermemo.com/english/contents.htm"&gt;articles&lt;/a&gt;, and not get lost in them.  I
would recommend reading the thesis and the suggested reading there, yourself,
but if you really don't want to – this blog post + the summary in &lt;a href="http://www.supermemo.com/articles/20rules.htm#Prioritize"&gt;here&lt;/a&gt;, and
&lt;a href="http://www.supermemo.com/articles/decalog.htm#decalog"&gt;here&lt;/a&gt; would be a good alternative.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Memory works by repetition.  Each time you recall a fact, the time it takes
for the memory to fade increases.  Spaced repetition is the idea of repeating
items, just when you are about to forget them – trying to optimize the time
spent on learning, as well as the retention of learned material.
&lt;/li&gt;

&lt;li&gt;Prioritization of the items we need to learn is key to being able to stick to
Spaced repetition.  Beginners tend to be over-enthusiastic about the
technique and fill up their system with stuff that they don't really care
about.  Applicability of the knowledge you are trying to gain, is a good test
for whether or not it goes into your system.
&lt;/li&gt;

&lt;li&gt;Each version of SuperMemo comes with a slightly modified (on most occassions,
improved!) algorithm.  SM2, SM5, … refer to these algorithms. Org-drill
currently supports only sm2,5 and 8.  It may be worth looking at sm15/16 and
seeing if it can be implemented and is worth doing.  In any case, using any
of these is &lt;b&gt;way&lt;/b&gt; better than not using Spaced repetition at all.
&lt;/li&gt;

&lt;li&gt;Understanding what we are trying to learn goes a long way in helping
memory. It is, therefore, good to start with basic material. People have been
surprised by how easily the advanced stuff fell into place, once they had the
basics covered.
&lt;/li&gt;

&lt;li&gt;Keep items in the system simple.  Stick to the minimum information
principle.  Keeping it simple, doesn't mean you leave out on learning the
complex stuff; instead break it into simpler components.  Simpler items has
the following advantages:

&lt;ul class="org-ul"&gt;
&lt;li&gt;Simple is easier to remember.
&lt;/li&gt;
&lt;li&gt;Simpler items are easier to schedule.  You get more resolution to figure
out what the problem areas are.
&lt;/li&gt;
&lt;li&gt;Simple makes brings in redundancy automatically.  And &lt;a href="http://en.wikipedia.org/wiki/Wikipedia:Redundancy_is_good"&gt;redundancy is good&lt;/a&gt;
    for memory, just like it is for managing hardware failure.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;Keep learning fun!  Don't make review sessions a chore.  Think about the
material you are reviewing. Edit/delete/improve items based on your reviews,
then and there. Stay active.
&lt;/li&gt;

&lt;li&gt;It is useful to add a link to the source of the items added to your system,
considering that you wish to use the system over a long period of time
(ideally, the rest of your life!)
&lt;/li&gt;

&lt;li&gt;Prioritize, add examples, appeal to your emotional state, link to existing
knowledge, use images. Anything else that works for you!  Use all of these
techniques, that work well and you probably already use in everyday life, in
the items you add to your system, to make them easier to recall.
&lt;/li&gt;

&lt;li&gt;Being physically fit and healthy is important for being so
mentally. Exercise, sleep, eat well, avoid caffeine.
&lt;/li&gt;

&lt;li&gt;Try &lt;a href="http://www.supermemo.com/help/read.htm"&gt;incremental&lt;/a&gt; &lt;a href="http://www.supermemo.com/articles/devour.htm"&gt;reading&lt;/a&gt;, as an input source of items into your memory system.
&lt;/li&gt;
&lt;/ul&gt;</description><category>learning</category><category>life</category><category>memory</category><category>software</category><guid>https://punchagan.muse-amuse.in/posts/learning-about-spaced-repetition-supermemo-org-drill-et-al.html</guid><pubDate>Fri, 24 Oct 2014 13:37:07 GMT</pubDate></item><item><title>Learning to use Org-drill</title><link>https://punchagan.muse-amuse.in/posts/learning-to-use-org-drill.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
Org-drill is an Org-mode extension that provides spaced-repetition and
flash-card functionality.  It has a &lt;a href="http://orgmode.org/worg/org-contrib/org-drill.html"&gt;wonderful documentation on Worg&lt;/a&gt;, but
somehow I couldn't get myself to read the whole document, and setup org-drill,
until now.
&lt;/p&gt;

&lt;p&gt;
The setup is quite straight forward, once you have org-mode along with the
&lt;code&gt;contrib&lt;/code&gt; packages.  Just &lt;code&gt;(require 'org-drill)&lt;/code&gt;, and you are all set!  To add
a new card, all you need to do is add a &lt;code&gt;:drill:&lt;/code&gt; tag to the items you wish to
"Org-drill".  You can start a review session with simply &lt;code&gt;M-x org-drill&lt;/code&gt;.  You
will be shown flash cards, and you can rate how correct and comfortable you
were, in answering the questions.  Based on your responses, the cards are
scheduled for review.  Start another review session, whenever you need one!
&lt;/p&gt;

&lt;p&gt;
What I could only understand once I got myself to read the whole document was
that:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;The default scope of a drill session is the current file.  But, you can start
sessions with scopes like current tree, current directory, or a specified
list of files. This is super-useful!
&lt;/li&gt;

&lt;li&gt;The review sessions are not automatically scheduled, based on when you
schedule failed flash-cards.  Scheduling the review for a card only sets a
due-date for them, and effects, what you are asked in your next session.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Cram mode and incremental reading are also things I want to try, as I go along.
&lt;/p&gt;

&lt;p&gt;
Happy Learning!
&lt;/p&gt;</description><category>emacs</category><category>learning</category><category>orgmode</category><category>software</category><guid>https://punchagan.muse-amuse.in/posts/learning-to-use-org-drill.html</guid><pubDate>Tue, 14 Oct 2014 04:07:04 GMT</pubDate></item><item><title>Recurse Center, 2014-07-22</title><link>https://punchagan.muse-amuse.in/posts/recurse-center-2014-07-22.html</link><dc:creator>punchagan</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Mel's talks&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Mel's talk in the morning was brilliant!  I wonder why it's not a part of
recommended reading for Hacker Schoolers, or referred to, in the manual.
&lt;/li&gt;
&lt;li&gt;Logically, it makes sense that Mel came now, so that she didn't have to come
twice to talk to the firsts and seconds, but it would have been great to have
had this talk in the first week of Hacker School!
&lt;/li&gt;
&lt;li&gt;Mel gave us a lot of new information and insights into education and learning
styles. I also like the fact that she gave us all a good vocabulary to think
about and discuss stuff related to learning. I will try to think, and apply
as much of this as I can, for the rest of my time here.
&lt;/li&gt;
&lt;li&gt;She talked about &lt;a href="http://blog.melchua.com/2014/02/10/test-driven-learning-setting-learning-goals-for-yourself-software-engineering-edition/"&gt;test driven learning&lt;/a&gt; which seemed very interesting. Instead
of just saying, "wow that would be an interesting thing to do", stop for a
moment, think about what you are trying to learn, and how you will assess if
you have learnt what you wanted to, and then dive into the project.
&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://www.engr.ncsu.edu/learningstyles/ilsweb.html"&gt;learning styles&lt;/a&gt; workshop was pretty good too, though I feel like I don't
know myself well enough, and I unable to properly "bucket" myself.  Later, I
took a &lt;a href="http://www.engr.ncsu.edu/learningstyles/ilsweb.html"&gt;quiz&lt;/a&gt;, and ended up fairly close to the middle, in all the dimensions.
&lt;/li&gt;
&lt;li&gt;Mel introduced us to the idea of &lt;a href="http://www.scribd.com/doc/201816780/A-Cognitive-Apprenticeship-Primer"&gt;cognitive apprenticeship&lt;/a&gt;, and encouraged us
to try out the different modes when pairing. I really liked the idea of &lt;a href="http://en.wikipedia.org/wiki/Zone_of_proximal_development"&gt;Zone
of proximal development&lt;/a&gt; and I will try to take the advice of spending most of
the rest of my time here in this zone.
&lt;/li&gt;
&lt;li&gt;Do I (really) care?  Motivation and mindset, …
&lt;/li&gt;
&lt;li&gt;Be courageous!
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Airplay and Raspberry Pi&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;I was trying to wrap libshairport and use it on the RPi to be able to listen
to songs being streamed on Airplay, and use that data to drive the LEDs.
&lt;/li&gt;
&lt;li&gt;Shairport, a tool written in C seemed to work.  My attempts to wrap
&lt;code&gt;libshairport&lt;/code&gt;, which is a fork of &lt;code&gt;shairport&lt;/code&gt; converting it into a library,
failed miserably.
&lt;/li&gt;
&lt;li&gt;The trouble was essentially getting Airplay to discover my service.  I tried
a bunch of things with &lt;code&gt;pybonjour&lt;/code&gt; and &lt;code&gt;avahi&lt;/code&gt;, but wasn't able to get it
right.
&lt;/li&gt;
&lt;li&gt;Finally, I tried just announcing the service with &lt;code&gt;shairport&lt;/code&gt;, and actually
running a python script that wraps &lt;code&gt;libshairport&lt;/code&gt; to listen to the data.
But, this didn't work and iTunes complained that this Airplay device is not
compatible. Before going much further with this, I found &lt;code&gt;shairplay&lt;/code&gt; which is
a tool similar to &lt;code&gt;shairport&lt;/code&gt;, but came with a library, and also Python
bindings!  I happily used this to get stuff working!
&lt;/li&gt;
&lt;li&gt;I'm interested to see today, what exactly I was missing yesterday!
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Emacs club&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;I demoed org-mode to a bunch of people for about half an hour, and it was
good to see people being blown away by what it can do, exactly the way I
was, when I first came across it.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Today&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Work on RPi to clean up a few things for the party.
&lt;/li&gt;
&lt;li&gt;Compare &lt;code&gt;libshairplay&lt;/code&gt; and &lt;code&gt;libshairport&lt;/code&gt; to see what I was doing wrong,
yesterday.
&lt;/li&gt;
&lt;li&gt;May be write up the whole thing, and make the code available.
&lt;/li&gt;
&lt;li&gt;Learn a little bit about Parsers from rntz.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>learning</category><category>python</category><category>raspberry-pi</category><category>recursecenter</category><guid>https://punchagan.muse-amuse.in/posts/recurse-center-2014-07-22.html</guid><pubDate>Tue, 22 Jul 2014 14:46:36 GMT</pubDate></item><item><title>Teach Yourself Programming in Ten Years!!</title><link>https://punchagan.muse-amuse.in/posts/teach-yourself-programming-in-ten-years.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
Here's an interesting article by Peter Norvig, Director of
Research Google I have just copied the whole essay here… also
here's a link to the Original one…
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Update:&lt;/b&gt; - &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2010-10-11 Mon]&lt;/span&gt;&lt;/span&gt; - Removed the copied content
&lt;/p&gt;</description><category>lafootgiri</category><category>learning</category><category>life</category><category>ology</category><guid>https://punchagan.muse-amuse.in/posts/teach-yourself-programming-in-ten-years.html</guid><pubDate>Fri, 02 Feb 2007 03:35:00 GMT</pubDate></item></channel></rss>