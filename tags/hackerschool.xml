<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Noetic Nought (hackerschool)</title><link>http://punchagan.muse-amuse.in/</link><description></description><atom:link href="http://punchagan.muse-amuse.in/tags/hackerschool.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Mon, 24 Nov 2014 18:45:55 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>OAuth2 demystified</title><link>http://punchagan.muse-amuse.in/posts/oauth2-demystified.html</link><dc:creator>punchagan</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Motivation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I was trying to pair on writing a simple app that uses Hacker
School's OAuth2 API, and hit a roadblock on the first step of
requesting an authorization from the user.  Once the user authorized
my app, I would see an error that said, "The authorization server
does not support this response type".  I was using a client library
that I had &lt;a href="https://github.com/litl/rauth"&gt;used before&lt;/a&gt;, and the server was using a what seemed like
a &lt;a href="https://github.com/doorkeeper-gem/doorkeeper"&gt;popular implementation&lt;/a&gt; for ruby on rails.  Getting weird errors is
not done!
&lt;/p&gt;

&lt;p&gt;
I have used OAuth2 based authentication &lt;a href="https://github.com/punchagan/statiki/blob/master/statiki.py#L49"&gt;before&lt;/a&gt;, but the thought of
using it always makes me a little nervous, just because
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;I don't understand it very well.
&lt;/li&gt;
&lt;li&gt;Like almost everything else, there seem to be so many libraries
for doing this in Python, and I'm never sure which one to use, or
which one I used the last time around.  Not understanding the
protocol also doesn't let me debug anything that comes up.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
To fix this, I set about to read and understand the &lt;a href="http://tools.ietf.org/html/rfc6749"&gt;OAuth2 protocol&lt;/a&gt;.
This blog post is an attempt to record it for future reference, and
possibly act as a reference for others.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Why OAuth&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
OAuth is simply a way for an end-user to allow third parties to use
protected data, without sharing the user's credentials with the
third-party.
&lt;/p&gt;

&lt;p&gt;
For example, an end-user (Jane) can grant a printing service
(Printo) access to her protected photos stored at a photo-sharing
service (Picasa), without sharing her username and password with the
printing service.  Instead, she authenticates directly with a server
trusted by the photo-sharing service, which issues the printing
service delegation-specific credentials. (example from the OAuth 2.0
spec)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Protocol Flow&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;img src="http://punchagan.muse-amuse.in/images/536281e1af42c5729864722aa6e9019ef9e93c0a.png"&gt;


&lt;p&gt;
The flow occurs through a sequence of user actions, client requests
and user-agent (browser) redirects.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;(A) Printo asks Jane to allow using Picasa Data. The request can
be sent directly to Jane, but is usually routed via
Picasa/Google.
&lt;/li&gt;

&lt;li&gt;(B) Printo gets back an authorization grant, which is a
credential representing Jane's authorization or approval.  The
type of the actual grant credential depends on the type of
request that Printo used.
&lt;/li&gt;

&lt;li&gt;(C, D) Printo gets back to Google with the credentials it obtained
in the previous step and obtains a token that it can use to talk
with Picasa.
&lt;/li&gt;

&lt;li&gt;(E, F) Printo asks for the desired photo with the token it
obtained previously, and Picasa gives back the photo to print.
Jane gets her framed photo!
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
But before any of this happens, the client needs to register with
the authorization server and obtain a &lt;code&gt;client_id&lt;/code&gt; and
&lt;code&gt;client_secret&lt;/code&gt;, that will be used to identify the client making
the requests.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Pythonized "authorization code" work-flow.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
The OAuth2 spec allows the authorization request/grant to be of 4
different types.  It also allows some flexibility in the token
type.
&lt;/p&gt;

&lt;p&gt;
In my experience, the most common work-flow seems to be using an
&lt;i&gt;authorization code&lt;/i&gt; as an authorization grant, and using a &lt;i&gt;Bearer&lt;/i&gt;
type token.  This work-flow is explained in the diagram below (taken
from the spec document).  This diagram zooms in, onto the steps A-D
in the diagram above.
&lt;/p&gt;

&lt;img src="http://punchagan.muse-amuse.in/images/8a0997a6a233baf9a6ff6c80998f8b1974826484.png"&gt;

&lt;p&gt;
This &lt;a href="https://gist.github.com/punchagan/76e8771fc26cd243f3ac"&gt;python code snippet&lt;/a&gt; is a simple implementation of this
workflow, using the Hacker School API.
&lt;/p&gt;

&lt;script src="https://gist.github.com/76e8771fc26cd243f3ac.js"&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;Conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
I think, I understand the OAuth2 spec a lot better now, and hope
that this will help others understand it, too.  And more
importantly, I won't get nervous when I have to add it to my
projects.
&lt;/p&gt;

&lt;p&gt;
Also, &lt;a href="https://github.com/idan/oauthlib"&gt;oauthlib&lt;/a&gt; for Python seems to be a pretty thorough
implementation of the spec, and &lt;a href="https://github.com/requests/requests-oauthlib"&gt;requests-oauthlib&lt;/a&gt; seems to wrap it
for use with requests.  I think I'm going to use this in my future
projects.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>hackerschool</category><category>oauth2</category><guid>http://punchagan.muse-amuse.in/posts/oauth2-demystified.html</guid><pubDate>Fri, 20 Jun 2014 14:09:51 GMT</pubDate></item></channel></rss>