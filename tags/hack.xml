<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Noetic Nought (hack)</title><link>http://punchagan.muse-amuse.in/</link><description></description><atom:link href="http://punchagan.muse-amuse.in/tags/hack.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Thu, 01 Jan 2015 02:54:14 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Jabber message queue</title><link>http://punchagan.muse-amuse.in/posts/jabber-message-queue.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I've always wanted to be able to queue up messages to send to friends, until I
go online the next time.  I tried using email instead of chat a few times, or
just ended up staying online with a busy status.
&lt;/p&gt;

&lt;p&gt;
Finally, now that I have started using jabber-mode for chatting from within
Emacs, I took out the time to write a "queuing system" for sending chat
messages, similar to the mail queue for smtpmail.  Instead of persisting sexps,
though, I persist the messages in a JSON format and the queue is flushed every
time I connect to jabber, in a &lt;code&gt;jabber-post-connect-hook&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
To make the interface as similar to the interface available when I am online, I
hacked completion for the to ID using email addresses in my address book
(&lt;code&gt;mu4e~contact-list&lt;/code&gt;).  I really like the fact that the chat buffer opens up,
and I can type and send messages like I usually do.  Hitting &lt;code&gt;RET&lt;/code&gt; after typing
a message queues it up, instead of trying to send it. Smooth!
&lt;/p&gt;

&lt;p&gt;
The code is in my &lt;a href="https://github.com/punchagan/dot-emacs/blob/7a5e184146194b9e28fd7edbb94ddd6c3bde845e/user-lisp/setup-jabber.el#L35-93"&gt;.emacs&lt;/a&gt;
&lt;/p&gt;</description><category>emacs</category><category>hack</category><guid>http://punchagan.muse-amuse.in/posts/jabber-message-queue.html</guid><pubDate>Tue, 09 Dec 2014 21:57:14 GMT</pubDate></item><item><title>erc-notifications when Emacs not in focus</title><link>http://punchagan.muse-amuse.in/posts/erc-notifications-when-emacs-not-in-focus.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I have been trying to get ERC working with notifications. Julien Danjou's
wonderful &lt;a href="https://julien.danjou.info/blog/2012/erc-notifications"&gt;notifications&lt;/a&gt; module for ERC is great, but it is annoying to get
notifications even when Emacs is in focus.
&lt;/p&gt;

&lt;p&gt;
I had looked at &lt;a href="https://github.com/eqyiel/circe-notifications/blob/master/circe-notifications.el"&gt;circe-notifications&lt;/a&gt;, which has the feature but uses xdotool and
xprop to do it.  I was looking for something simpler, though… and it suddenly
struck me that I have an auto-save hook in Emacs that is run when I focus out
of it.  I wondered if I could disable and enable notifications on focus, and it
worked.
&lt;/p&gt;

&lt;p&gt;
In case it is useful for somebody else -
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'erc-modules&lt;/span&gt; &lt;span class="ss"&gt;'notifications&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;erc-notifications-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'focus-out-hook&lt;/span&gt; &lt;span class="ss"&gt;'erc-notifications-enable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'focus-in-hook&lt;/span&gt; &lt;span class="ss"&gt;'erc-notifications-disable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I wonder if there are some corner cases where this doesn't work, and that's why
the author of circe-notifications chose the tools that he did.
&lt;/p&gt;</description><category>emacs</category><category>hack</category><guid>http://punchagan.muse-amuse.in/posts/erc-notifications-when-emacs-not-in-focus.html</guid><pubDate>Thu, 06 Nov 2014 12:35:12 GMT</pubDate></item><item><title>More input sources for org-drill</title><link>http://punchagan.muse-amuse.in/posts/more-input-sources-for-org-drill.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I've been trying to use &lt;code&gt;org-drill&lt;/code&gt; regularly for the last few weeks.  I don't
know how well it's been going but I have been sticking to the routine
religiously.  I haven't yet really tried out incremental reading, but in an
attempt to make it as easy as possible, I wanted to have a pdf-reader
integration, and some kind of integration with Kindle highlights.  Browser
integration is pretty straight-forward, thanks to some &lt;a href="http://orgmode.org/worg/org-contrib/org-protocol.html#sec-6"&gt;simple java-script&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I looked for a pdf-reader with some sort of plugin support, but I found nothing
in Evince or Okular.  I thought about &lt;code&gt;pdfjs&lt;/code&gt; but it seemed slightly clunky to
open pdfs in a browser, though I might shift to this if I don't like what I
finally ended up with.  Good old &lt;code&gt;xpdf&lt;/code&gt; seemed to be the only pdf reader that
had some support for custom keybindings that allowed users to run external
commands.  With a &lt;a href="https://github.com/punchagan/dot-emacs/blob/master/xpdf-capture"&gt;little Python&lt;/a&gt;, I was able to setup a work-flow to capture
snippets from &lt;code&gt;xpdf&lt;/code&gt;, to add to org-drill. Custom key-bindings somehow don't
seem to work on &lt;code&gt;xpdf&lt;/code&gt; bundled on Ubuntu. So, I ended up downloading and using
the binary available on the xpdf site.
&lt;/p&gt;

&lt;p&gt;
For Kindle highlights support, with minor updates to Thamer Mahmoud's &lt;a href="https://github.com/punchagan/clip2org"&gt;clip2org&lt;/a&gt;,
I have a simple way of getting all the "new" clippings/highlights as org-drill
headlines.  I haven't really started using this, and once I do, I may end-up
automating even the merging of these items into the org-drill notes file.  I'm
looking forward to making better use of my Kindle, with this feature!
&lt;/p&gt;

&lt;p&gt;
I don't know if it would be useful to have more context information like
section titles/chapter titles when capturing from html/pdf, but it seems like
an interesting problem to try to solve.
&lt;/p&gt;

&lt;p&gt;
Also, it might be easier(?) if I probably tried to have a DE level keybinding, and
some code to get selection and file name of the currently active
window/application.
&lt;/p&gt;</description><category>emacs</category><category>hack</category><category>learning</category><category>orgmode</category><guid>http://punchagan.muse-amuse.in/posts/more-input-sources-for-org-drill.html</guid><pubDate>Tue, 04 Nov 2014 01:55:04 GMT</pubDate></item><item><title>Hacker School, 2014-07-29</title><link>http://punchagan.muse-amuse.in/posts/hacker-school-2014-07-29.html</link><dc:creator>punchagan</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Hacking: learning by breaking stuff&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Post lunch, I started pairing with Stephanie on the exercises in the &lt;a href="http://www.nostarch.com/hacking2.htm"&gt;Hacking&lt;/a&gt;
  book, and that turned out to be super fun!
&lt;/li&gt;
&lt;li&gt;We got through the chapter on exploitation, which focussed on stack
overflows, heap overflows, overflows in function pointers, and string
formatting exploits.  It acted as more than a gentle refresher for C, and was
super fun!
&lt;/li&gt;
&lt;li&gt;Running the examples on a 64bit system, added an additional amount of
thinking required, and was good, IMO.
&lt;/li&gt;
&lt;li&gt;I hadn't worked along with Stephanie on the material in the first two
chapters.  So, I went back home and tried to catch up, but couldn't get all
of it done.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Miscellaneous&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;I spent part of the morning wrapping up the install script for the raspberry
project, and cleaning up the repository.  &lt;a href="https://github.com/kbeyer/RPi-LED-SpectrumAnalyzer"&gt;It looks reasonable now&lt;/a&gt;, and I
think I'm done with it until the end of HackerSchool.
&lt;/li&gt;
&lt;li&gt;I also tried to look for "easy" python issues that would involve me writing
some C code, but didn't really find anything other than documentation… I
guess, I should pick a module and look for bugs in it, instead.
&lt;/li&gt;
&lt;li&gt;Also, while chatting with a friend, I had to explain that I don't mention the
last names of people or link to them, for privacy reasons.  Hacker School is
particularly careful about not divulging information about who are at Hacker
School each batch, and I want to keep that tradition.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>C</category><category>hack</category><category>hackerschool</category><category>raspberry-pi</category><guid>http://punchagan.muse-amuse.in/posts/hacker-school-2014-07-29.html</guid><pubDate>Tue, 29 Jul 2014 15:20:24 GMT</pubDate></item><item><title>Let there be light, in skype!</title><link>http://punchagan.muse-amuse.in/posts/let-there-be-light-in-skype.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
At home, my video would always show a silhouette in G+ and Skype, and
I always thought that this was because the lighting at home was not
sufficient.  At office, the video was decent.  But, moving to sit
right under the light also didn't help much.
&lt;/p&gt;

&lt;p&gt;
Struggling with a bunch of tools like &lt;code&gt;v4lctl&lt;/code&gt;, &lt;code&gt;guvcview&lt;/code&gt; didn't
help. But, during these struggles I noticed that &lt;code&gt;cheese&lt;/code&gt; would show
me bright and cheerful, while all the other programs showed my
silhouette.
&lt;/p&gt;

&lt;p&gt;
I set out to "fake" the output of &lt;code&gt;cheese&lt;/code&gt; as a video device that
skype and other programs could use. But, I didn't have to go all the
way.  I ended up using &lt;a href="https://github.com/umlaeute/v4l2loopback/"&gt;v4l2loopback&lt;/a&gt; to create a loopback video device,
and just using &lt;code&gt;gst-launch&lt;/code&gt; to redirect video to that device, did the
trick!  Thanks gstreamer!  Thanks v4l2loopback! :)
&lt;/p&gt;

&lt;p&gt;
Here's a convenient &lt;a href="https://gist.github.com/punchagan/9859210"&gt;script&lt;/a&gt; to use it every time I need it.
&lt;/p&gt;

&lt;script src="https://gist.github.com/9859210.js"&gt;&lt;/script&gt;</description><category>hack</category><category>linux</category><guid>http://punchagan.muse-amuse.in/posts/let-there-be-light-in-skype.html</guid><pubDate>Sat, 29 Mar 2014 17:52:27 GMT</pubDate></item><item><title>Scraping Google Groups</title><link>http://punchagan.muse-amuse.in/posts/scraping-google-groups.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I was playing around with a few ideas for creating a timeline for the
mumbai ultimate group, and as a part of playing around with stuff, for
that idea, I ended up wanting to scrape all the emails on our google
group.  After looking around a little bit, I failed to find anything
that claims to be able to do this.
&lt;/p&gt;

&lt;p&gt;
So I ended up writing my own &lt;a href="https://gist.github.com/punchagan/7947337"&gt;hacky script&lt;/a&gt; to download all the emails
sent on the group.  Like I said, this is a hack and can be improved
quite a bit, but I am not inclined to do anything about it, right
now.  Since, everything about google groups is ajaxy, this script uses
selenium and does things on the page, that one would do by hand.  It's
not something that I am proud of, but it does the job!
&lt;/p&gt;</description><category>email</category><category>hack</category><category>idea</category><category>mumbai</category><category>ultimate</category><guid>http://punchagan.muse-amuse.in/posts/scraping-google-groups.html</guid><pubDate>Tue, 31 Dec 2013 14:25:58 GMT</pubDate></item><item><title>A smarter 404 page.</title><link>http://punchagan.muse-amuse.in/posts/a-smarter-404-page.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
&lt;a href="http://twitter.com/avudem"&gt;Voodoo&lt;/a&gt; found a broken link referring to a one of my posts, on Quora.
Given that I have changed my site generator a bunch of times now, it
is quite possible that there are other broken links at various other
places.  So, I implemented a smart &lt;a href="http://punchagan.muse-amuse.in/this-is-a-fun-hack"&gt;404 page&lt;/a&gt; for the site, yesterday.
It is very similar to something I came across on &lt;a href="http://brettterpstra.com/2013/04/07/fun-with-intelligent-404-pages/"&gt;brettterpstra&lt;/a&gt;'s site.
I just &lt;a href="http://punchagan.muse-amuse.in/assets/js/suggestions.js"&gt;hooked up&lt;/a&gt; &lt;a href="http://kiro.me/projects/fuse.html"&gt;fuse.js&lt;/a&gt; with Nikola's &lt;a href="http://getnikola.com/handbook.html#local-search"&gt;tipue-search plugin&lt;/a&gt;'s output
file.  My glue code essentially, just figures out the search term from
the URL, performs a Fuse search on the json data created by Nikola's
search plugin, and returns a list of top 5 results.  It just took me
about an hour to write, but is pretty useful, I think.
&lt;/p&gt;</description><category>code</category><category>fuzzy-search</category><category>hack</category><category>js</category><guid>http://punchagan.muse-amuse.in/posts/a-smarter-404-page.html</guid><pubDate>Mon, 11 Nov 2013 07:06:53 GMT</pubDate></item><item><title>Blogging with Nikola and Org-mode</title><link>http://punchagan.muse-amuse.in/posts/blogging-with-nikola-and-org-mode.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
Sigh! I made yet another change to the way this blog gets published.
But, I have a feeling this mechanism, is here to stay!
&lt;/p&gt;

&lt;p&gt;
We've been using Nikola quite regularly for our &lt;a href="http://ultimatesport.in"&gt;Ultimate site&lt;/a&gt;, and I
quite like it.  I've also contributed a bunch of features to Nikola to
get it to work the way I would like it to.  This weekend I ported my
blog from &lt;a href="https://github.com/renard/o-blog"&gt;o-blog&lt;/a&gt; to &lt;a href="http://getnikola.com"&gt;Nikola&lt;/a&gt;.  The only thing that was stopping me
from doing it, until now is the fact that all my posts are in
org markup and porting them over to one of the formats that Nikola
supports would be a PITA.  So, I wrote a &lt;a href="http://plugins.getnikola.com/#orgmode"&gt;pretty simple plugin&lt;/a&gt; to
Nikola to support posting from org files.  And then with a &lt;a href="https://gist.github.com/punchagan/6970578"&gt;little
Python&lt;/a&gt;, I was able to move everything over to use Nikola.
&lt;/p&gt;

&lt;p&gt;
Hopefully, I'll keep my blog more updated, from here on!
&lt;/p&gt;</description><category>blog</category><category>hack</category><category>orgmode</category><guid>http://punchagan.muse-amuse.in/posts/blogging-with-nikola-and-org-mode.html</guid><pubDate>Wed, 16 Oct 2013 17:10:47 GMT</pubDate></item><item><title>GitHub Cue: Recommendations for GitHub Repos</title><link>http://punchagan.muse-amuse.in/posts/github-cue-recommendations-for-github-repos.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
If you aren't already aware of it, I'm one of those people who
goes around saying, "GitHub is my Facebook".  I spend quite a lot
of time on GitHub, browsing the work of various people, looking at
loads of interesting stuff that people built.  I keep jumping
between people pages and projects using the Watchers/Watching &amp;amp;
Followers/Following pages.  This way, I do come across interesting
people and projects, but the SNR is too low.  I wanted a better
way to be able to see stuff, that I find interesting.  That's how
the idea for this Chromium app – GitHub Cue – was born.
&lt;/p&gt;

&lt;p&gt;
@baali and I hacked on this, during the last few days and got it
working.  It works as follows, (from the README) —
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Scrapes all the descriptions of the repositories being watched
by the user.
&lt;/li&gt;
&lt;li&gt;Key terms are extracted from this description text using the
Yahoo Term Extractor.
&lt;/li&gt;
&lt;li&gt;A list of languages is obtained, based on the languages of the
repositories, the user if watching.
&lt;/li&gt;
&lt;li&gt;GitHub searches are performed for a combination of 3 randomly
chosen languages and 5 random key terms.
&lt;/li&gt;
&lt;li&gt;10 random repositories out of all these, are shown.
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
This is a very simplistic algorithm, but works decently for my
purposes.  Ideally, I would've liked to use a Collaborative
Filtering algorithm, but I found the data to be too sparse, and
the amount of computation to be too much to be done on the fly.  I
wasn't really interested in pre-computing stuff and putting it
onto my server.  I settled down to the next best thing I could
think of.
&lt;/p&gt;

&lt;p&gt;
I would appreciate any further ideas and suggestions.  Thanks!
&lt;/p&gt;</description><category>app</category><category>chrome</category><category>code</category><category>github</category><category>hack</category><guid>http://punchagan.muse-amuse.in/posts/github-cue-recommendations-for-github-repos.html</guid><pubDate>Fri, 05 Aug 2011 13:21:00 GMT</pubDate></item><item><title>Do our eyes suck at blue?</title><link>http://punchagan.muse-amuse.in/posts/do-our-eyes-suck-at-blue.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
This is some fun I had, trying to replicate what was written in
this post. I had been trying to understand what was happening
here, and found this post on Hacker News very helpful.
&lt;/p&gt;

&lt;p&gt;
It is a known fact that our eyes have more cones for green and
red as compared to blue.  The Bayer filter used for digital camera
lenses is based upon this principle.  This post tries to
illustrate that using the following two arguments.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Looking at only the blue channel of an image looks very dark.
&lt;/li&gt;
&lt;li&gt;Tripling the pixel size of blue channel doesn't cause much
distortion in the final image.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Hence, our eyes suck at blue.
&lt;/p&gt;

&lt;p&gt;
Their argument is flawed, but we could try and improve a few
things.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Looking at the blue channel.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This is definitely flawed, since the intensity of blue in the
image they have taken may be less and hence giving us a false
positive.
&lt;/p&gt;

&lt;p&gt;
We could instead gray-scale the image and use these pixel values
in the 3 channels and look at the images.
&lt;/p&gt;

&lt;p&gt;
This also eliminates the problem of the image being captured
through a Bayer filter.
&lt;/p&gt;

&lt;p&gt;
Here's some &lt;code&gt;python&lt;/code&gt; code to do the same. (uses &lt;code&gt;matplotlib&lt;/code&gt;)
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_channels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zeros_like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
	&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_grey_channels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zeros_like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;
	&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Pixelating the blue channel&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Again, there was this argument of use of Bayer filter affecting
the image and the like.
&lt;/p&gt;

&lt;p&gt;
What I did was to swap the channels, and then look at the
images. However I swapped the channels, the image where the
green channel was pixelated always looked the worst.  The
difference between blue and red was less noticeable, I feel.
&lt;/p&gt;

&lt;p&gt;
Here's the code.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;
    &lt;span class="n"&gt;row_stride&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col_stride&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strides&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stride_tricks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_strided&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
			&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
			&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_stride&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col_stride&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subsample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; channel subsampled"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
	&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swap_subsample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;-- &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zeros_like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	    &lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
	&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; channel subsampled"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
	&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Images&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Here are a few images.  (View them in their original size)
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://punchagan.muse-amuse.in/images/channels.png" alt="channels.png"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://punchagan.muse-amuse.in/images/subsample.png" alt="subsample.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>fun</category><category>hack</category><category>image_processing</category><category>python</category><guid>http://punchagan.muse-amuse.in/posts/do-our-eyes-suck-at-blue.html</guid><pubDate>Sat, 13 Nov 2010 07:56:00 GMT</pubDate></item></channel></rss>