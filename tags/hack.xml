<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Noetic Nought (hack)</title><link>https://punchagan.muse-amuse.in/</link><description></description><atom:link href="https://punchagan.muse-amuse.in/tags/hack.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Thu, 19 May 2016 04:18:38 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Elfeed hook to fetch full content</title><link>https://punchagan.muse-amuse.in/posts/elfeed-hook-to-fetch-full-content.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I have started to use &lt;a href="http://pinboard.in"&gt;Pinboard&lt;/a&gt;'s &lt;code&gt;unread&lt;/code&gt; tag as my to-read list.  It has a
bookmark-let that works pretty well for adding stuff into my "to-read" list.  I
then catch up on this list using &lt;code&gt;elfeed&lt;/code&gt; and subscribing to the unread items'
RSS feed.  The work-flow is pretty nice for adding stuff into the list, and
finding items on the list. But, when it comes to the actual reading part, the
entries in the feed don't have the actual content I want to read, and I end up
opening the links in a browser.
&lt;/p&gt;

&lt;p&gt;
Inspired by a &lt;a href="https://github.com/sursh/blaggregator/pull/80#issuecomment-165849126"&gt;comment from FiloSottile&lt;/a&gt;, I realized it should be pretty easy to
setup a hook that fetches the actual content to make my reading work-flow
smoother. I wrote a &lt;a href="https://github.com/punchagan/dot-files/blob/master/bin/get_article.py"&gt;small script&lt;/a&gt;, using &lt;a href="https://github.com/buriy/python-readability"&gt;python-readability&lt;/a&gt;, to fetch the page
content, given a URL. This script is then hooked onto &lt;code&gt;elfeed-new-entry-hook&lt;/code&gt;,
to fetch content of for new entries as they are fetched.  All the old entries
can be easily fixed with a single call to &lt;code&gt;elfeed-apply-hooks-now&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/get-url-content&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Fetches the content for a url."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;shell-command-to-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"~/bin/get_article.py %s"&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/get-entry-content&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Fetches content for pinboard entries that are not tweets."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="nv"&gt;elfeed-show-entry&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-entry-link&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;feed-id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-deref&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-entry-feed-id&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-deref&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-entry-content&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s-matches?&lt;/span&gt; &lt;span class="s"&gt;"feeds.pinboard.in/"&lt;/span&gt; &lt;span class="nv"&gt;feed-id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s-matches?&lt;/span&gt; &lt;span class="s"&gt;"twitter.com/\\|pdf$\\|png$\\|jpg$"&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-equal&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pc/get-url-content&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-entry-content&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-ref&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'elfeed-new-entry-hook&lt;/span&gt; &lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;pc/get-entry-content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>blag</category><category>elfeed</category><category>emacs</category><category>hack</category><category>pinboard</category><guid>https://punchagan.muse-amuse.in/posts/elfeed-hook-to-fetch-full-content.html</guid><pubDate>Sat, 19 Dec 2015 08:12:29 GMT</pubDate></item><item><title>Say Howdy with Emacs!</title><link>https://punchagan.muse-amuse.in/posts/say-howdy-with-emacs.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
Staying in touch with people is something I'm not very good at.  Since I am not
on popular (among my friends/family) networks – FB and Whatsapp – I don't
even see random updates from people, to get some sense of being in touch.
&lt;/p&gt;

&lt;p&gt;
I recently read some old posts by Sacha Chua and was inspired by how much code
she had for &lt;a href="http://sachachua.com/blog/category/geek/emacs/bbdb/"&gt;contact management&lt;/a&gt; in her old blog posts.  I was inspired by &lt;a href="http://sachachua.com/blog/2005/05/keeping-in-touch/"&gt;this
post&lt;/a&gt; in particular to try and be more meticulous about how I stay in touch with
people. Michael Fogleman &lt;a href="https://mwfogleman.github.io/posts/08-01-2015-emacs-can-keep-in-touch.html"&gt;blogged&lt;/a&gt; about his contact management work-flow using
&lt;code&gt;keepintouch&lt;/code&gt;. It seemed to do most of what I wanted, but I wanted this to be
integrated with my &lt;code&gt;org-contacts-db&lt;/code&gt; and I felt having native elisp code would
make it easier to hook up email, chat, etc. to this.
&lt;/p&gt;

&lt;p&gt;
I ended up writing a small utility called &lt;a href="https://github.com/punchagan/howdy/"&gt;howdy&lt;/a&gt; to help me keep in touch with
people. It currently has only a couple of features:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;M-x howdy&lt;/code&gt; lets me update the last contacted timestamp for a contact.
&lt;/li&gt;
&lt;li&gt;Shows me contacts that I'm out of touch in the agenda, once I add the
following snippet to an agenda file.
&lt;div class="highlight"&gt;&lt;pre&gt;* Howdy
  %%(howdy-howdy)
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I also have a few hooks to hook up jabber messages and email to update the db.
I've added them to &lt;code&gt;howdy-hooks.el&lt;/code&gt; in case anybody else wants to use them.
They can also be used as examples to write other hooks. Feel free to contribute
other hooks or suggest improvements.  The library also ships with a modest test
suite, that will hopefully make it easier for others to contribute.
&lt;/p&gt;

&lt;p&gt;
I'm looking forward to experimenting with this over the next few weeks and
improving it. Hopefully, it'll help me keep in touch, better than I do now.
&lt;/p&gt;</description><category>blag</category><category>code</category><category>emacs</category><category>hack</category><category>howdy</category><guid>https://punchagan.muse-amuse.in/posts/say-howdy-with-emacs.html</guid><pubDate>Thu, 28 May 2015 13:09:24 GMT</pubDate></item><item><title>org-drill for making it stick!</title><link>https://punchagan.muse-amuse.in/posts/org-drill-for-making-it-stick.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
Those who read the &lt;a href="https://punchagan.muse-amuse.in/posts/learning-to-use-org-drill.html"&gt;last&lt;/a&gt; &lt;a href="https://punchagan.muse-amuse.in/posts/learning-about-spaced-repetition-supermemo-org-drill-et-al.html"&gt;few&lt;/a&gt; &lt;a href="https://punchagan.muse-amuse.in/posts/more-input-sources-for-org-drill.html"&gt;posts&lt;/a&gt; here, would know that I have been
experimenting with &lt;a href="http://orgmode.org/worg/org-contrib/org-drill.html"&gt;org-drill&lt;/a&gt; (a spaced repetition extension to &lt;a href="http://orgmode.org/"&gt;Org mode&lt;/a&gt;).  I
have been using the system (almost) religiously for the past 2 months, and I do
find that it has helped a great deal! (in some respects).  I have also spent a
considerable amount of time trying to reduce the friction to put new stuff into
the system, and am constantly on the look out for further improvements.
&lt;/p&gt;

&lt;p&gt;
Using this system has definitely helped with retention, and I find that I can
recall quite a few things I have read a few weeks ago, that I would normally
have been unable to. Though, I can recall a lot of information, I have been
having a feeling of "fragmentation": the feeling of just retaining individual
bits/fragments of information, while losing out on actually internalizing the
knowledge; not seeing the big picture, etc.
&lt;/p&gt;

&lt;p&gt;
Wozniak (the author of super-memo) &lt;a href="http://www.supermemo.com/articles/20rules.htm"&gt;warns against&lt;/a&gt; learning without
understanding, and memorizing before actually learning stuff.  I haven't
consciously added stuff into the system that I didn't understand (when I added
it), but, later it does feel like I have lost some connections or the
understanding, and am only holding onto the fragments of information.
&lt;/p&gt;

&lt;p&gt;
The problems as explained in (read: as interpreted by me from) &lt;a href="http://www.amazon.com/Make-Stick-Science-Successful-Learning/dp/0674729013/ref=sr_1_1/188-6768042-2821103?ie=UTF8&amp;amp;qid=1421439099&amp;amp;sr=8-1&amp;amp;keywords=make+it+stick&amp;amp;pebp=1421439103302&amp;amp;peasin=674729013"&gt;Make it Stick&lt;/a&gt;
appear to be:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;The understanding (if any) at the time of adding stuff into the
spaced-repetition system is untested.  It may just be familiarity
masquerading as understanding.
&lt;/li&gt;

&lt;li&gt;The lack of any spaced repetitions for the overall concept/understanding and
actual repetitions only for individual bits doesn't help retention of the
understanding (even if there was any, in the first place).
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
To work around this, I'm going to try adding questions that test understanding,
to the system.  The Super-memo team strongly recommends keeping the drill items
small and easy to answer.  This may be helpful in keeping each drill session
short, but I would really like to add conceptual questions to the system, and
see how it goes. I hacked &lt;code&gt;org-drill&lt;/code&gt; to allow me to type out answers, before
looking at the "correct" ones.  This is an adaptation of a system that a fellow
Hacker Schooler uses, and shared.  Also, hopefully forcing myself to type out
the answer will help me get around the problem of sometimes saying "yeah I know
that", then looking at the answer only to reaffirm the feeling of familiarity,
rather than actually testing myself.  I'm still going to continue adding quick
and short questions that test "bits of information", though. But, hopefully the
additional conceptual questions are going to tie things together and help fill
in the gaps.  Lets see how this goes!
&lt;/p&gt;

&lt;p&gt;
For those interested, my hacks to &lt;code&gt;org-drill&lt;/code&gt; below.  The code is really a
hack, and welcome any suggestions on cleaning up the code.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;advice-add&lt;/span&gt; &lt;span class="ss"&gt;'org-drill-presentation-prompt&lt;/span&gt; &lt;span class="nb"&gt;:around&lt;/span&gt; &lt;span class="ss"&gt;'pc/org-drill-presentation-prompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/org-drill-presentation-prompt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;old-fun&lt;/span&gt; &lt;span class="kp"&gt;&amp;amp;rest&lt;/span&gt; &lt;span class="nv"&gt;fmt-and-args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"A presentation prompt that allows capturing answers."&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;cb&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;heading&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;nth&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-heading-components&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;entry-id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-entry-get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"ID"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="s"&gt;"*org-capture-drill-answer*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="s"&gt;"# Hit C-c C-c once you are done answering!\\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-insert-heading-respect-content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"Answer: %s"&lt;/span&gt; &lt;span class="nv"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-entry-put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"QUESTION_ID"&lt;/span&gt; &lt;span class="nv"&gt;entry-id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="s"&gt;"  "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-time-stamp-inactive&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="s"&gt;"\\n\\n  "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;equal&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ignore-errors&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;execute-kbd-macro&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;read-key-sequence&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="nv"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt; &lt;span class="nv"&gt;old-fun&lt;/span&gt; &lt;span class="nv"&gt;fmt-and-args&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;advice-add&lt;/span&gt; &lt;span class="ss"&gt;'org-drill-reschedule&lt;/span&gt; &lt;span class="nb"&gt;:around&lt;/span&gt; &lt;span class="ss"&gt;'pc/org-drill-reschedule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/org-drill-reschedule&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;old-fun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Calls the original reschedule, but also archives the answer"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;prog1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;funcall&lt;/span&gt; &lt;span class="nv"&gt;old-fun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;cb&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-buffer&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="s"&gt;"*org-capture-drill-answer*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pc/org-refile-to-datetree&lt;/span&gt; &lt;span class="s"&gt;"drill.org_archive"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buffer-name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="nv"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kill-buffer&lt;/span&gt; &lt;span class="s"&gt;"*org-capture-drill-answer*"&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'org-datetree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/org-refile-to-datetree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;journal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Refile an entry to journal file's date-tree"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;"fRefile to: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;journal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt; &lt;span class="nv"&gt;journal&lt;/span&gt; &lt;span class="nv"&gt;org-directory&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;date-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-entry-get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"TIMESTAMP_IA"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-entry-get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"TIMESTAMP"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;decode-time&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;date-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-time-string-to-time&lt;/span&gt; &lt;span class="nv"&gt;date-string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
			       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-time&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;date&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;nth&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nv"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;nth&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;nth&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nv"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-cut-subtree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;with-current-buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-buffer-visiting&lt;/span&gt; &lt;span class="nv"&gt;journal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-file-noselect&lt;/span&gt; &lt;span class="nv"&gt;journal&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;save-excursion&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-datetree-file-entry-under&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-kill&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;bookmark-set&lt;/span&gt; &lt;span class="s"&gt;"org-refile-last-stored"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"Refiled to %s"&lt;/span&gt; &lt;span class="nv"&gt;journal&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>blag</category><category>emacs</category><category>hack</category><category>hackerschool</category><category>learning</category><category>orgmode</category><guid>https://punchagan.muse-amuse.in/posts/org-drill-for-making-it-stick.html</guid><pubDate>Fri, 16 Jan 2015 19:36:54 GMT</pubDate></item><item><title>Jabber message queue</title><link>https://punchagan.muse-amuse.in/posts/jabber-message-queue.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I've always wanted to be able to queue up messages to send to friends, until I
go online the next time.  I tried using email instead of chat a few times, or
just ended up staying online with a busy status.
&lt;/p&gt;

&lt;p&gt;
Finally, now that I have started using jabber-mode for chatting from within
Emacs, I took out the time to write a "queuing system" for sending chat
messages, similar to the mail queue for smtpmail.  Instead of persisting sexps,
though, I persist the messages in a JSON format and the queue is flushed every
time I connect to jabber, in a &lt;code&gt;jabber-post-connect-hook&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
To make the interface as similar to the interface available when I am online, I
hacked completion for the to ID using email addresses in my address book
(&lt;code&gt;mu4e~contact-list&lt;/code&gt;).  I really like the fact that the chat buffer opens up,
and I can type and send messages like I usually do.  Hitting &lt;code&gt;RET&lt;/code&gt; after typing
a message queues it up, instead of trying to send it. Smooth!
&lt;/p&gt;

&lt;p&gt;
The code is in my &lt;a href="https://github.com/punchagan/dot-emacs/blob/master/punchagan.org#jabber"&gt;.emacs&lt;/a&gt;
&lt;/p&gt;</description><category>emacs</category><category>hack</category><guid>https://punchagan.muse-amuse.in/posts/jabber-message-queue.html</guid><pubDate>Tue, 09 Dec 2014 21:57:14 GMT</pubDate></item><item><title>erc-notifications when Emacs not in focus</title><link>https://punchagan.muse-amuse.in/posts/erc-notifications-when-emacs-not-in-focus.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I have been trying to get ERC working with notifications. Julien Danjou's
wonderful &lt;a href="https://julien.danjou.info/blog/2012/erc-notifications"&gt;notifications&lt;/a&gt; module for ERC is great, but it is annoying to get
notifications even when Emacs is in focus.
&lt;/p&gt;

&lt;p&gt;
I had looked at &lt;a href="https://github.com/eqyiel/circe-notifications/blob/master/circe-notifications.el"&gt;circe-notifications&lt;/a&gt;, which has the feature but uses xdotool and
xprop to do it.  I was looking for something simpler, though… and it suddenly
struck me that I have an auto-save hook in Emacs that is run when I focus out
of it.  I wondered if I could disable and enable notifications on focus, and it
worked.
&lt;/p&gt;

&lt;p&gt;
In case it is useful for somebody else -
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'erc-modules&lt;/span&gt; &lt;span class="ss"&gt;'notifications&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;erc-notifications-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'focus-out-hook&lt;/span&gt; &lt;span class="ss"&gt;'erc-notifications-enable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'focus-in-hook&lt;/span&gt; &lt;span class="ss"&gt;'erc-notifications-disable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I wonder if there are some corner cases where this doesn't work, and that's why
the author of circe-notifications chose the tools that he did.
&lt;/p&gt;</description><category>emacs</category><category>hack</category><guid>https://punchagan.muse-amuse.in/posts/erc-notifications-when-emacs-not-in-focus.html</guid><pubDate>Thu, 06 Nov 2014 12:35:12 GMT</pubDate></item><item><title>More input sources for org-drill</title><link>https://punchagan.muse-amuse.in/posts/more-input-sources-for-org-drill.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I've been trying to use &lt;code&gt;org-drill&lt;/code&gt; regularly for the last few weeks.  I don't
know how well it's been going but I have been sticking to the routine
religiously.  I haven't yet really tried out incremental reading, but in an
attempt to make it as easy as possible, I wanted to have a pdf-reader
integration, and some kind of integration with Kindle highlights.  Browser
integration is pretty straight-forward, thanks to some &lt;a href="http://orgmode.org/worg/org-contrib/org-protocol.html#sec-6"&gt;simple java-script&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I looked for a pdf-reader with some sort of plugin support, but I found nothing
in Evince or Okular.  I thought about &lt;code&gt;pdfjs&lt;/code&gt; but it seemed slightly clunky to
open pdfs in a browser, though I might shift to this if I don't like what I
finally ended up with.  Good old &lt;code&gt;xpdf&lt;/code&gt; seemed to be the only pdf reader that
had some support for custom keybindings that allowed users to run external
commands.  With a &lt;a href="https://github.com/punchagan/dot-emacs/blob/master/xpdf-capture"&gt;little Python&lt;/a&gt;, I was able to setup a work-flow to capture
snippets from &lt;code&gt;xpdf&lt;/code&gt;, to add to org-drill. Custom key-bindings somehow don't
seem to work on &lt;code&gt;xpdf&lt;/code&gt; bundled on Ubuntu. So, I ended up downloading and using
the binary available on the xpdf site.
&lt;/p&gt;

&lt;p&gt;
For Kindle highlights support, with minor updates to Thamer Mahmoud's &lt;a href="https://github.com/punchagan/clip2org"&gt;clip2org&lt;/a&gt;,
I have a simple way of getting all the "new" clippings/highlights as org-drill
headlines.  I haven't really started using this, and once I do, I may end-up
automating even the merging of these items into the org-drill notes file.  I'm
looking forward to making better use of my Kindle, with this feature!
&lt;/p&gt;

&lt;p&gt;
I don't know if it would be useful to have more context information like
section titles/chapter titles when capturing from html/pdf, but it seems like
an interesting problem to try to solve.
&lt;/p&gt;

&lt;p&gt;
Also, it might be easier(?) if I probably tried to have a DE level keybinding, and
some code to get selection and file name of the currently active
window/application.
&lt;/p&gt;</description><category>emacs</category><category>hack</category><category>learning</category><category>orgmode</category><guid>https://punchagan.muse-amuse.in/posts/more-input-sources-for-org-drill.html</guid><pubDate>Tue, 04 Nov 2014 01:55:04 GMT</pubDate></item><item><title>Recurse Center, 2014-07-29</title><link>https://punchagan.muse-amuse.in/posts/recurse-center-2014-07-29.html</link><dc:creator>punchagan</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Hacking: learning by breaking stuff&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Post lunch, I started pairing with Stephanie on the exercises in the &lt;a href="http://www.nostarch.com/hacking2.htm"&gt;Hacking&lt;/a&gt;
  book, and that turned out to be super fun!
&lt;/li&gt;
&lt;li&gt;We got through the chapter on exploitation, which focussed on stack
overflows, heap overflows, overflows in function pointers, and string
formatting exploits.  It acted as more than a gentle refresher for C, and was
super fun!
&lt;/li&gt;
&lt;li&gt;Running the examples on a 64bit system, added an additional amount of
thinking required, and was good, IMO.
&lt;/li&gt;
&lt;li&gt;I hadn't worked along with Stephanie on the material in the first two
chapters.  So, I went back home and tried to catch up, but couldn't get all
of it done.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Miscellaneous&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;I spent part of the morning wrapping up the install script for the raspberry
project, and cleaning up the repository.  &lt;a href="https://github.com/kbeyer/RPi-LED-SpectrumAnalyzer"&gt;It looks reasonable now&lt;/a&gt;, and I
think I'm done with it until the end of HackerSchool.
&lt;/li&gt;
&lt;li&gt;I also tried to look for "easy" python issues that would involve me writing
some C code, but didn't really find anything other than documentation… I
guess, I should pick a module and look for bugs in it, instead.
&lt;/li&gt;
&lt;li&gt;Also, while chatting with a friend, I had to explain that I don't mention the
last names of people or link to them, for privacy reasons.  Hacker School is
particularly careful about not divulging information about who are at Hacker
School each batch, and I want to keep that tradition.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>C</category><category>hack</category><category>raspberry-pi</category><category>recursecenter</category><guid>https://punchagan.muse-amuse.in/posts/recurse-center-2014-07-29.html</guid><pubDate>Tue, 29 Jul 2014 15:20:24 GMT</pubDate></item><item><title>Let there be light, in skype!</title><link>https://punchagan.muse-amuse.in/posts/let-there-be-light-in-skype.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
At home, my video would always show a silhouette in G+ and Skype, and
I always thought that this was because the lighting at home was not
sufficient.  At office, the video was decent.  But, moving to sit
right under the light also didn't help much.
&lt;/p&gt;

&lt;p&gt;
Struggling with a bunch of tools like &lt;code&gt;v4lctl&lt;/code&gt;, &lt;code&gt;guvcview&lt;/code&gt; didn't
help. But, during these struggles I noticed that &lt;code&gt;cheese&lt;/code&gt; would show
me bright and cheerful, while all the other programs showed my
silhouette.
&lt;/p&gt;

&lt;p&gt;
I set out to "fake" the output of &lt;code&gt;cheese&lt;/code&gt; as a video device that
skype and other programs could use. But, I didn't have to go all the
way.  I ended up using &lt;a href="https://github.com/umlaeute/v4l2loopback/"&gt;v4l2loopback&lt;/a&gt; to create a loopback video device,
and just using &lt;code&gt;gst-launch&lt;/code&gt; to redirect video to that device, did the
trick!  Thanks gstreamer!  Thanks v4l2loopback! :)
&lt;/p&gt;

&lt;p&gt;
Here's a convenient &lt;a href="https://gist.github.com/punchagan/9859210"&gt;script&lt;/a&gt; to use it every time I need it.
&lt;/p&gt;

&lt;script src="https://gist.github.com/9859210.js"&gt;&lt;/script&gt;</description><category>hack</category><category>linux</category><guid>https://punchagan.muse-amuse.in/posts/let-there-be-light-in-skype.html</guid><pubDate>Sat, 29 Mar 2014 17:52:27 GMT</pubDate></item><item><title>Scraping Google Groups</title><link>https://punchagan.muse-amuse.in/posts/scraping-google-groups.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I was playing around with a few ideas for creating a timeline for the
mumbai ultimate group, and as a part of playing around with stuff, for
that idea, I ended up wanting to scrape all the emails on our google
group.  After looking around a little bit, I failed to find anything
that claims to be able to do this.
&lt;/p&gt;

&lt;p&gt;
So I ended up writing my own &lt;a href="https://gist.github.com/punchagan/7947337"&gt;hacky script&lt;/a&gt; to download all the emails
sent on the group.  Like I said, this is a hack and can be improved
quite a bit, but I am not inclined to do anything about it, right
now.  Since, everything about google groups is ajaxy, this script uses
selenium and does things on the page, that one would do by hand.  It's
not something that I am proud of, but it does the job!
&lt;/p&gt;</description><category>email</category><category>hack</category><category>idea</category><category>mumbai</category><category>ultimate</category><guid>https://punchagan.muse-amuse.in/posts/scraping-google-groups.html</guid><pubDate>Tue, 31 Dec 2013 14:25:58 GMT</pubDate></item><item><title>A smarter 404 page.</title><link>https://punchagan.muse-amuse.in/posts/a-smarter-404-page.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
&lt;a href="http://twitter.com/avudem"&gt;Voodoo&lt;/a&gt; found a broken link referring to a one of my posts, on Quora.
Given that I have changed my site generator a bunch of times now, it
is quite possible that there are other broken links at various other
places.  So, I implemented a smart &lt;a href="https://punchagan.muse-amuse.in/this-is-a-fun-hack"&gt;404 page&lt;/a&gt; for the site, yesterday.
It is very similar to something I came across on &lt;a href="http://brettterpstra.com/2013/04/07/fun-with-intelligent-404-pages/"&gt;brettterpstra&lt;/a&gt;'s site.
I just &lt;a href="https://punchagan.muse-amuse.in/assets/js/suggestions.js"&gt;hooked up&lt;/a&gt; &lt;a href="http://kiro.me/projects/fuse.html"&gt;fuse.js&lt;/a&gt; with Nikola's &lt;a href="http://getnikola.com/handbook.html#local-search"&gt;tipue-search plugin&lt;/a&gt;'s output
file.  My glue code essentially, just figures out the search term from
the URL, performs a Fuse search on the json data created by Nikola's
search plugin, and returns a list of top 5 results.  It just took me
about an hour to write, but is pretty useful, I think.
&lt;/p&gt;</description><category>code</category><category>fuzzy-search</category><category>hack</category><category>js</category><guid>https://punchagan.muse-amuse.in/posts/a-smarter-404-page.html</guid><pubDate>Mon, 11 Nov 2013 07:06:53 GMT</pubDate></item></channel></rss>