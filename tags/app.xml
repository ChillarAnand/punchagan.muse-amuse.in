<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Noetic Nought (app)</title><link>http://punchagan.muse-amuse.in/</link><description></description><language>en</language><lastBuildDate>Fri, 22 Aug 2014 10:33:05 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>GitHub Cue: Recommendations for GitHub Repos</title><link>http://punchagan.muse-amuse.in/posts/github-cue-recommendations-for-github-repos.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
If you aren't already aware of it, I'm one of those people who
goes around saying, "GitHub is my Facebook".  I spend quite a lot
of time on GitHub, browsing the work of various people, looking at
loads of interesting stuff that people built.  I keep jumping
between people pages and projects using the Watchers/Watching &amp;amp;
Followers/Following pages.  This way, I do come across interesting
people and projects, but the SNR is too low.  I wanted a better
way to be able to see stuff, that I find interesting.  That's how
the idea for this Chromium app – GitHub Cue – was born.
&lt;/p&gt;

&lt;p&gt;
@baali and I hacked on this, during the last few days and got it
working.  It works as follows, (from the README) —
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Scrapes all the descriptions of the repositories being watched
by the user.
&lt;/li&gt;
&lt;li&gt;Key terms are extracted from this description text using the
Yahoo Term Extractor.
&lt;/li&gt;
&lt;li&gt;A list of languages is obtained, based on the languages of the
repositories, the user if watching.
&lt;/li&gt;
&lt;li&gt;GitHub searches are performed for a combination of 3 randomly
chosen languages and 5 random key terms.
&lt;/li&gt;
&lt;li&gt;10 random repositories out of all these, are shown.
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
This is a very simplistic algorithm, but works decently for my
purposes.  Ideally, I would've liked to use a Collaborative
Filtering algorithm, but I found the data to be too sparse, and
the amount of computation to be too much to be done on the fly.  I
wasn't really interested in pre-computing stuff and putting it
onto my server.  I settled down to the next best thing I could
think of.
&lt;/p&gt;

&lt;p&gt;
I would appreciate any further ideas and suggestions.  Thanks!
&lt;/p&gt;</description><category>app</category><category>chrome</category><category>code</category><category>github</category><category>hack</category><guid>http://punchagan.muse-amuse.in/posts/github-cue-recommendations-for-github-repos.html</guid><pubDate>Fri, 05 Aug 2011 22:51:00 GMT</pubDate></item></channel></rss>