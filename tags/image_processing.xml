<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Noetic Nought (image_processing)</title><link>http://punchagan.muse-amuse.in/</link><description></description><language>en</language><lastBuildDate>Sat, 23 Aug 2014 14:49:16 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Do our eyes suck at blue?</title><link>http://punchagan.muse-amuse.in/posts/do-our-eyes-suck-at-blue.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
This is some fun I had, trying to replicate what was written in
this post. I had been trying to understand what was happening
here, and found this post on Hacker News very helpful.
&lt;/p&gt;

&lt;p&gt;
It is a known fact that our eyes have more cones for green and
red as compared to blue.  The Bayer filter used for digital camera
lenses is based upon this principle.  This post tries to
illustrate that using the following two arguments.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Looking at only the blue channel of an image looks very dark.
&lt;/li&gt;
&lt;li&gt;Tripling the pixel size of blue channel doesn't cause much
distortion in the final image.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Hence, our eyes suck at blue.
&lt;/p&gt;

&lt;p&gt;
Their argument is flawed, but we could try and improve a few
things.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Looking at the blue channel.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This is definitely flawed, since the intensity of blue in the
image they have taken may be less and hence giving us a false
positive.
&lt;/p&gt;

&lt;p&gt;
We could instead gray-scale the image and use these pixel values
in the 3 channels and look at the images.
&lt;/p&gt;

&lt;p&gt;
This also eliminates the problem of the image being captured
through a Bayer filter.
&lt;/p&gt;

&lt;p&gt;
Here's some &lt;code&gt;python&lt;/code&gt; code to do the same. (uses &lt;code&gt;matplotlib&lt;/code&gt;)
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;show_channels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zeros_like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
	&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;show_grey_channels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zeros_like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;
	&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Pixelating the blue channel&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Again, there was this argument of use of Bayer filter affecting
the image and the like.
&lt;/p&gt;

&lt;p&gt;
What I did was to swap the channels, and then look at the
images. However I swapped the channels, the image where the
green channel was pixelated always looked the worst.  The
difference between blue and red was less noticeable, I feel.
&lt;/p&gt;

&lt;p&gt;
Here's the code.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;def zoom&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; factor&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rows&lt;span class="p"&gt;,&lt;/span&gt; cols &lt;span class="o"&gt;=&lt;/span&gt; x.shape
    row_stride&lt;span class="p"&gt;,&lt;/span&gt; col_stride &lt;span class="o"&gt;=&lt;/span&gt; x.strides
    view &lt;span class="o"&gt;=&lt;/span&gt; np.lib.stride_tricks.as_strided&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt;
			&lt;span class="p"&gt;(&lt;/span&gt;rows&lt;span class="p"&gt;,&lt;/span&gt; factor&lt;span class="p"&gt;,&lt;/span&gt; cols&lt;span class="p"&gt;,&lt;/span&gt; factor&lt;span class="p"&gt;),&lt;/span&gt;
			&lt;span class="p"&gt;(&lt;/span&gt;row_stride&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; col_stride&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt; view.reshape&lt;span class="p"&gt;((&lt;/span&gt;rows&lt;span class="o"&gt;*&lt;/span&gt;factor&lt;span class="p"&gt;,&lt;/span&gt; cols&lt;span class="o"&gt;*&lt;/span&gt;factor&lt;span class="p"&gt;))&lt;/span&gt;

def subsample&lt;span class="p"&gt;(&lt;/span&gt;I&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kr"&gt;for&lt;/span&gt; i &lt;span class="kr"&gt;in&lt;/span&gt; range&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
	J &lt;span class="o"&gt;=&lt;/span&gt; I.copy&lt;span class="p"&gt;()&lt;/span&gt;
	J&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; i&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; zoom&lt;span class="p"&gt;(&lt;/span&gt;I&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; i&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	figure&lt;span class="p"&gt;(&lt;/span&gt;i&lt;span class="p"&gt;)&lt;/span&gt;
	title&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s channel subsampled"&lt;/span&gt; &lt;span class="o"&gt;%colors[i])&lt;/span&gt;
&lt;span class="o"&gt;	imshow(J)&lt;/span&gt;

&lt;span class="o"&gt;def swap_subsample(I, k=1):&lt;/span&gt;
&lt;span class="o"&gt;    for c, color in enumerate(colors):&lt;/span&gt;
&lt;span class="o"&gt;	print "%&lt;/span&gt;s &lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="o"&gt;%s" %&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;colors&lt;span class="p"&gt;[&lt;/span&gt;c&lt;span class="p"&gt;],&lt;/span&gt; colors&lt;span class="p"&gt;[(&lt;/span&gt;c&lt;span class="o"&gt;+&lt;/span&gt;k&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%3])&lt;/span&gt;
&lt;span class="o"&gt;    for i in range(3):&lt;/span&gt;
&lt;span class="o"&gt;	J = zeros_like(I)&lt;/span&gt;
&lt;span class="o"&gt;	for j in range(3):&lt;/span&gt;
&lt;span class="o"&gt;	    J[:, :, j] = I[:, :, (j+k)%&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
	J&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; i&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; zoom&lt;span class="p"&gt;(&lt;/span&gt;I&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;i&lt;span class="o"&gt;+&lt;/span&gt;k&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%3], 4)&lt;/span&gt;
&lt;span class="o"&gt;	figure(i+10)&lt;/span&gt;
&lt;span class="o"&gt;	title("%&lt;/span&gt;s channel subsampled&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="err"&gt; %colors[i])&lt;/span&gt;
	imshow&lt;span class="p"&gt;(&lt;/span&gt;J&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Images&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Here are a few images.  (View them in their original size)
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://punchagan.muse-amuse.in/images/channels.png" alt="channels.png"&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://punchagan.muse-amuse.in/images/subsample.png" alt="subsample.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>fun</category><category>hack</category><category>image_processing</category><category>python</category><guid>http://punchagan.muse-amuse.in/posts/do-our-eyes-suck-at-blue.html</guid><pubDate>Sat, 13 Nov 2010 18:26:00 GMT</pubDate></item><item><title>talk at GNUnify' 10</title><link>http://punchagan.muse-amuse.in/posts/talk-at-gnunify-10.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
Shantanu and I conducted a workshop on Scipy at GNUnify '10. It
was intended to be an introduction to Scipy and Numpy through
Image processing. We expected an audience which was python
literate. But GNUnify's schedule wasn't too favorable for us. Ours
was the first talk scheduled and we ended up getting people who
only "heard" of Python, the language.
&lt;/p&gt;

&lt;p&gt;
We had planned quite a bit of stuff expecting a python literate
audience. But unfortunately, we had to start almost from scratch
and couldn't do all of what we planned. Still, the workshop wasn't
too bad. Nobody left mid-way during the 2 hour workshop; nobody
was dozing either.  I would have liked my first talk at a FOSS
event to be better, though.
&lt;/p&gt;

&lt;p&gt;
Slides and Images that we used.  Shantanu's post on the talk is
here.
&lt;/p&gt;</description><category>image_processing</category><category>ology</category><category>python</category><category>scipy</category><guid>http://punchagan.muse-amuse.in/posts/talk-at-gnunify-10.html</guid><pubDate>Mon, 01 Mar 2010 01:58:00 GMT</pubDate></item></channel></rss>