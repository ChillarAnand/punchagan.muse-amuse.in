<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Noetic Nought (github)</title><link>https://punchagan.muse-amuse.in/</link><description></description><atom:link href="https://punchagan.muse-amuse.in/tags/github.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Wed, 25 May 2016 11:27:06 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Recurse Center, 2014-06-11</title><link>https://punchagan.muse-amuse.in/posts/recurse-center-2014-06-11.html</link><dc:creator>punchagan</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Plan&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Continue with the Haskell tutorials, with additional reading from
Real World Haskell.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Actual&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Finished exercises 4 and 5.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Learnt about Type classes in Haskell and how to create them and
make data types instances of them.
&lt;/li&gt;
&lt;li&gt;Also came across a new algorithm of sieving called the &lt;a href="http://en.wikipedia.org/wiki/Sieve_of_Sundaram"&gt;Sieve of
Sundaram&lt;/a&gt;, which was discovered by a student.  Surprisingly, I
never heard of it before!
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Miscellaneous&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;A few of us had an interesting discussion about various places
people grew up in and visited, and the cultures, etc.
&lt;/li&gt;
&lt;li&gt;Idea: implement a GitHub dashboard for organizations (say, HS
batches) that give you different statistics, and interesting
graphs. (Use elm?) [Update: Tom is working on HS and GitHub
integration. So, that's perfect!]
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>github</category><category>haskell</category><category>idea</category><category>recursecenter</category><guid>https://punchagan.muse-amuse.in/posts/recurse-center-2014-06-11.html</guid><pubDate>Wed, 11 Jun 2014 19:02:11 GMT</pubDate></item><item><title>GitHub Cue: Recommendations for GitHub Repos</title><link>https://punchagan.muse-amuse.in/posts/github-cue-recommendations-for-github-repos.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
If you aren't already aware of it, I'm one of those people who
goes around saying, "GitHub is my Facebook".  I spend quite a lot
of time on GitHub, browsing the work of various people, looking at
loads of interesting stuff that people built.  I keep jumping
between people pages and projects using the Watchers/Watching &amp;amp;
Followers/Following pages.  This way, I do come across interesting
people and projects, but the SNR is too low.  I wanted a better
way to be able to see stuff, that I find interesting.  That's how
the idea for this Chromium app – GitHub Cue – was born.
&lt;/p&gt;

&lt;p&gt;
@baali and I hacked on this, during the last few days and got it
working.  It works as follows, (from the README) —
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Scrapes all the descriptions of the repositories being watched
by the user.
&lt;/li&gt;
&lt;li&gt;Key terms are extracted from this description text using the
Yahoo Term Extractor.
&lt;/li&gt;
&lt;li&gt;A list of languages is obtained, based on the languages of the
repositories, the user if watching.
&lt;/li&gt;
&lt;li&gt;GitHub searches are performed for a combination of 3 randomly
chosen languages and 5 random key terms.
&lt;/li&gt;
&lt;li&gt;10 random repositories out of all these, are shown.
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
This is a very simplistic algorithm, but works decently for my
purposes.  Ideally, I would've liked to use a Collaborative
Filtering algorithm, but I found the data to be too sparse, and
the amount of computation to be too much to be done on the fly.  I
wasn't really interested in pre-computing stuff and putting it
onto my server.  I settled down to the next best thing I could
think of.
&lt;/p&gt;

&lt;p&gt;
I would appreciate any further ideas and suggestions.  Thanks!
&lt;/p&gt;</description><category>app</category><category>chrome</category><category>code</category><category>github</category><category>hack</category><guid>https://punchagan.muse-amuse.in/posts/github-cue-recommendations-for-github-repos.html</guid><pubDate>Fri, 05 Aug 2011 13:21:00 GMT</pubDate></item></channel></rss>