<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Noetic Nought (newbie)</title><link>http://punchagan.muse-amuse.in/</link><description></description><atom:link href="http://punchagan.muse-amuse.in/tags/newbie.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sat, 25 Oct 2014 20:09:44 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>I love FOSS.  How do I start contributing (code)?</title><link>http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html</link><dc:creator>punchagan</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Why this article?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I teach (Science and Engineering) students and teachers to use
Python for their computational tasks.  I'm occasionally asked
this question or something similar.  I remember, it was not too
long ago, that I asked this question very often.  I asked
anybody who was more experienced than me, "How do I start
contributing (code) to FOSS?" and all the answers I got, were
very similar.  Also, my answer is not going to be radically
different.  But, I would still like to answer this question,
because -
&lt;/p&gt;


&lt;ol class="org-ol"&gt;
&lt;li&gt;All the answers I got, were from big-time, experienced
contributors.  I suspect, they only vaguely remember how it feels
to be just starting off.  But, I am just starting off and I think
my answer brings a slightly different perspective that would help
others&lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;.
&lt;/li&gt;
&lt;li&gt;This piece of writing is meant to be one comprehensive
compilation of things I want to share, if and when I'm asked
this question in the future&lt;sup&gt;&lt;a id="fnr.2" name="fnr.2" class="footref" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;/li&gt;
&lt;li&gt;More than anything else, a reminder and reference for myself.  I
still have a long way to go.  I only have a handful of
contributions against my name (none of them earth shattering).  I
haven't (yet) done my 10,000 hours of programming nor have I
learned anything like half a dozen programming
languages.&lt;sup&gt;&lt;a id="fnr.3" name="fnr.3" class="footref" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fn.3"&gt;3&lt;/a&gt;&lt;/sup&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Thanks to baali, Ringo and Voodoo for reading drafts of this
article and giving some very valuable feedback to improve
it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;What should I do?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
I know how exciting the FOSS world seems, the first time we discover
it.  You are dying to contribute.  You want to contribute, Right
Now!  But you've no clue, what, where and how.  Relax.  Give
yourself time.  You've a lifetime ahead of you.  Explore.  Explore,
even more.  Play with things, Try out stuff, Break stuff, Spill
things all over the place.  Have fun!&lt;sup&gt;&lt;a id="fnr.4" name="fnr.4" class="footref" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fn.4"&gt;4&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;

&lt;p&gt;
Given that you are reading this, I presume that, you do have access
to the Internet.  But, if you don't, it could turn an impediment to
your goal.  Easy access to a decent internet connection is a
prerequisite.
&lt;/p&gt;

&lt;p&gt;
Learn a programming language, well&lt;sup&gt;&lt;a id="fnr.3.100" name="fnr.3.100" class="footref" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fn.3"&gt;3&lt;/a&gt;&lt;/sup&gt;.  By learning, I don't
mean getting familiar with the syntax or passing a bunch of exams.
Get familiar with the paradigms of the language.  Learn to think in
that language.  Write code that does something &lt;b&gt;real&lt;/b&gt;, instead of
doing toy examples.&lt;sup&gt;&lt;a id="fnr.5" name="fnr.5" class="footref" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fn.5"&gt;5&lt;/a&gt;&lt;/sup&gt;  Also, it helps know bits and pieces about the
history and evolution of the language.  This will give you a sense
of why some features are present (or absent) and will help you
program better, in that language&lt;sup&gt;&lt;a id="fnr.6" name="fnr.6" class="footref" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fn.6"&gt;6&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;p&gt;
Some projects will definitely catch your eye, while you are
exploring.  Start using the ones that you need.  Follow them!
&lt;/p&gt;

&lt;p&gt;
Start with using the bleeding edge &lt;sup&gt;&lt;a id="fnr.7" name="fnr.7" class="footref" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fn.7"&gt;7&lt;/a&gt;&lt;/sup&gt; software.  Bleeding edge
refers to the latest sources of the project, where the active
development is going on.  Given the continuous nature of software
development, using the latest source,
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;prevents you from wasting time on fixing bugs that have already
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
been fixed and
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;lets you look at the latest changes being made and contribute
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
effectively and easily
 Also, start following the project mailing lists – both the dev and
 the user lists, if they are separate.  The user-list discussions
 will help you discover functionality and possibly give you some
 chance to peek at the source code, too.  Don't be surprised or
 worried if you don't follow most of what goes on, in the dev-list.
 Be patient and keep at it.  You will learn a lot about the &lt;i&gt;what,
 why and how&lt;/i&gt; of the project.  Also don't be afraid to look foolish
 there!  There wouldn't be one developer who doesn't have some
 embarrassing logs of stuff she said in public, in her initial days.
&lt;/p&gt;

&lt;p&gt;
Slowly you'll start to learn the dynamics of the community – how
things function, the DOs and DON'Ts, etc &lt;sup&gt;&lt;a id="fnr.8" name="fnr.8" class="footref" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fn.8"&gt;8&lt;/a&gt;&lt;/sup&gt;.  Also, there's
a good chance that the project has an active IRC channel.  If it
does, hanging out there will give you more insights.  Contributing
to the documentation, is often a useful step before contributing
code.  Cleaning up the documentation or writing documentation, often
requires you to read the code and helps you understand it better.
&lt;/p&gt;

&lt;p&gt;
Next, start &lt;b&gt;acting&lt;/b&gt; on Bug reports (or tiny feature requests).
Start with trying to reproduce the bugs and sending confirmations.
Gradually, start looking at the source and trying to figure out
where the problem is.  Be patient, with this &lt;sup&gt;&lt;a id="fnr.9" name="fnr.9" class="footref" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fn.9"&gt;9&lt;/a&gt;&lt;/sup&gt; .  Once
you get comfortable with the code and the coding style, start
sending code snippets and comments, explaining what you think might
be the problem.  One fine day, you will be able to send a full
working patch!  But, before that don't hesitate to send partial
fixes.  You can learn a lot from the comments of the devs and
looking at how they finally fixed it.  Also, IRC could be a good
place to ask for help, if you are stuck and are looking for some
quick help, so you can move further.
&lt;/p&gt;

&lt;p&gt;
In all of this, it helps if you have one (or a bunch of) favorite
&lt;i&gt;area(s)&lt;/i&gt; or &lt;i&gt;module(s)&lt;/i&gt; of the project, specially in a big project.
You should pounce upon any issues in your favorite area.
&lt;/p&gt;

&lt;p&gt;
Participate in sprints.  It's not uncommon for projects to have
regular sprints.  Make it there &lt;sup&gt;&lt;a id="fnr.10" name="fnr.10" class="footref" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fn.10"&gt;10&lt;/a&gt;&lt;/sup&gt;!  Also, a couple of
developers may decide to meet up on a weekend and hack.  If it's
happening in your neighborhood, ask if you can join.  Don't be
surprised, if they shout out a big YES!  You will definitely learn a
lot, when there is help so close-by.
&lt;/p&gt;

&lt;p&gt;
A &lt;i&gt;shortcut&lt;/i&gt; would be to start your own project!  It is easier (in
some ways) to release your own code under a FOSS license, than
contribute to some of the existing projects.  You don't have to have
your code approved by the project leads, you don't need to mould
your code to fit the standards of the project, you don't have to
read and understand all the (relevant parts of the) existing code,
etc.  But all of this, definitely teaches you a lot.
&lt;/p&gt;

&lt;p&gt;
As a beginner, I think it is important to solve your &lt;b&gt;own&lt;/b&gt; problems,
problems that you care about (at least at that point in time).  Most
of the projects, started off with their developers wanting to solve
their own problems.  Only, incidentally, they solved some of the
World's problems, too!
&lt;/p&gt;

&lt;p&gt;
Start small, though.  Don't start off with a project that aims to
replace Chrome or Firefox as the best browser, or an editor to
replace Vim or Emacs.  Writing extensions to your favorite software
could be a good place to start, for instance an Emacs minor/major
mode&lt;sup&gt;&lt;a id="fnr.11" name="fnr.11" class="footref" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fn.11"&gt;11&lt;/a&gt;&lt;/sup&gt;, a Chrome extension&lt;sup&gt;&lt;a id="fnr.12" name="fnr.12" class="footref" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fn.12"&gt;12&lt;/a&gt;&lt;/sup&gt;, etc.  Stand on the shoulders
of giants!
&lt;/p&gt;

&lt;p&gt;
Also, take this as an opportunity to gain some of the skills that
would be useful, when you want to start contributing to others
projects.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Learn to use Version Control (Git + GitHub is awesome!)
&lt;/li&gt;
&lt;li&gt;Learn to use build and setup tools.
&lt;/li&gt;
&lt;li&gt;Learn about packaging and distributing your software.
&lt;/li&gt;
&lt;li&gt;Learn how to license your code.
&lt;/li&gt;
&lt;li&gt;Learn to Collaborate!
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
All of this, I hope, would suffice to get your first contribution
in.  But, there are a few things that will help you in the long run.
&lt;/p&gt;

&lt;p&gt;
Good English. Specially written communication, since that is how you
would be communicating, more often than not.  Fair or not, hackers
are known to be very particular about good communication.  I'm not
exaggerating when I say, what you say may be ignored even if it
makes perfect sense, if you said it in sloppy English.
&lt;/p&gt;

&lt;p&gt;
Using a *nix would put you in some great company.  At the very
least, you save time when looking for solutions to known problems.
Using a good editor and learning to type quickly can be big
productivity gains.  You only get 24 hours a day!
&lt;/p&gt;

&lt;p&gt;
An understanding of licensing issues, can come in handy, many a
times.
&lt;/p&gt;

&lt;p&gt;
For more, read How to Become a Hacker by Eric Raymond.
&lt;/p&gt;

&lt;p&gt;
Happy Hacking!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
I'm writing in the Indian context.
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" name="fn.2" class="footnum" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
All of this is generic advice, but students applying to
programs like GSoC, may find it useful.
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.3" name="fn.3" class="footnum" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fnr.3"&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
Teach Yourself Programming in Ten Years by Peter Norvig.
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.4" name="fn.4" class="footnum" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fnr.4"&gt;4&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
Getting yourself a GitHub account and &lt;i&gt;socializing&lt;/i&gt; there
is a lot of fun and helps quite a bit.  GitHub is my Facebook!
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.5" name="fn.5" class="footnum" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fnr.5"&gt;5&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
I started learning Python from &lt;i&gt;the Python tutorial&lt;/i&gt; and some
other sources and doing the examples in them.  It was good, but I
think I started learning more, and better, when I started solving
problems from Project Euler.  And writing an IRC bot in Python, taught
me a lot more than all of this.
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.6" name="fn.6" class="footnum" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fnr.6"&gt;6&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
I recommend Python, but I am definitely biased.  Any
language that is generic enough would do, really.
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;It gets you off the blocks, very quickly.
&lt;/li&gt;
&lt;li&gt;It is easy to learn.
&lt;/li&gt;
&lt;li&gt;It is batteries included. Read as, comes bundled with a huge bunch of libraries.
&lt;/li&gt;
&lt;li&gt;It is general purpose enough. Read as, it has libraries that let you do anything, you'd possibly want to do.
&lt;/li&gt;
&lt;li&gt;There's a lot of Python code around, that you can read and
&lt;/li&gt;
&lt;/ol&gt;
&lt;p class="footpara"&gt;
learn from.
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.7" name="fn.7" class="footnum" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fnr.7"&gt;7&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
You may have to learn to use a version control system; at the
very least cloning and pulling updates.
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.8" name="fn.8" class="footnum" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fnr.8"&gt;8&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
Org-mode is the only project that I really contribute to,
actively.  I &lt;b&gt;really&lt;/b&gt; liked the way the community gels together and
the kind of people on the list.  There are some really knowledgeable,
friendly and helpful people.  It feels great to be a part of the
community.
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.9" name="fn.9" class="footnum" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fnr.9"&gt;9&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
There have been instances, where it took me half a day
to fix something, that would've been fixed in about an hour by someone
more comfortable with the code.  But, I think everybody goes through
this stage.  This is how you learn.
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.10" name="fn.10" class="footnum" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fnr.10"&gt;10&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
A few months ago, I was part of a sprint on the numpy-scipy
eco-system.  We had somewhere around 50 patches (a lot of them were
documentation fixes) submitted to all the projects!  Most of the
people were submitting their first patch and I think it was a great
opportunity for them to start.  [I should try and get back to them.]
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.11" name="fn.11" class="footnum" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fnr.11"&gt;11&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
Org-mode is really awesome, and I use it for everything I
write.  Blog posts are a big part of what I write, and so, I wanted to
write them in orgmode.  And so, org2blog was born.
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.12" name="fn.12" class="footnum" href="http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html#fnr.12"&gt;12&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
I recently wrote a Chrome extension, thanks to a friend's
idea.  Inspired by Gmail notifications, a GitHub addict wanted
notifications for activity in GitHub.
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>contribute</category><category>foss</category><category>howto</category><category>newbie</category><guid>http://punchagan.muse-amuse.in/posts/i-love-foss-how-do-i-start-contributing-code.html</guid><pubDate>Sun, 27 Mar 2011 19:04:00 GMT</pubDate></item><item><title>Contributing to FOSS</title><link>http://punchagan.muse-amuse.in/posts/contributing-to-foss.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
gora asked for some good links (on ##linux-india) to redirect
newbies, enthusiastic about contributing to FOSS.
&lt;/p&gt;

&lt;p&gt;
I dug up a few links from the web - some that I read, when I
was starting off with using GNU/Linux and FOSS, others are
newer links.
&lt;/p&gt;

&lt;p&gt;
Just making a note of them here; hoping someone would find it
useful.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;How to Become a Hacker - A definitive how-to on becoming a
hacker. Answers all the right questions. :)
&lt;/li&gt;

&lt;li&gt;Philosophy of the GNU Project - This is the page, where I
started. Thanks to Voodoo for giving me the link to this page. I
distinctly remember that day. :) I'm going to pass on this link
to any newbie who comes my way, no matter how much bashing I get
from other FOSS evangelists.
&lt;/li&gt;

&lt;li&gt;6 Easy Ways To Get Started Programming Open Source - A neat list
giving steps to get started with programming for open source. I
like #4. Understanding the social dynamics of the project is an
important thing which is often overlooked by newbies.
&lt;/li&gt;

&lt;li&gt;OpenHatch - A community site to help newbies get started with
contributing to FOSS. A cool site. Also, here is a story about
OpenHatch.
&lt;/li&gt;

&lt;li&gt;Look at the Numbers! - an interesting paper giving quantitative
data in support of using FOSS.
&lt;/li&gt;

&lt;li&gt;Ubuntu - Code of Conduct - A nice description of general conduct
expected in any of the FOSS communities, not just Ubuntu.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I'd be happy to add any other links that any of you share. Thanks!
&lt;/p&gt;</description><category>contribute</category><category>foss</category><category>howto</category><category>newbie</category><category>note</category><guid>http://punchagan.muse-amuse.in/posts/contributing-to-foss.html</guid><pubDate>Wed, 18 Aug 2010 18:36:00 GMT</pubDate></item></channel></rss>