<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Noetic Nought</title><link>http://punchagan.muse-amuse.in/</link><description>punchagan's home on the web.</description><language>en</language><lastBuildDate>Sun, 14 Sep 2014 22:41:49 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>OAuth2 demystified</title><link>http://punchagan.muse-amuse.in/posts/oauth2-demystified.html</link><dc:creator>punchagan</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Motivation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I was trying to pair on writing a simple app that uses Hacker
School's OAuth2 API, and hit a roadblock on the first step of
requesting an authorization from the user.  Once the user authorized
my app, I would see an error that said, "The authorization server
does not support this response type".  I was using a client library
that I had &lt;a href="https://github.com/litl/rauth"&gt;used before&lt;/a&gt;, and the server was using a what seemed like
a &lt;a href="https://github.com/doorkeeper-gem/doorkeeper"&gt;popular implementation&lt;/a&gt; for ruby on rails.  Getting weird errors is
not done!
&lt;/p&gt;

&lt;p&gt;
I have used OAuth2 based authentication &lt;a href="https://github.com/punchagan/statiki/blob/master/statiki.py#L49"&gt;before&lt;/a&gt;, but the thought of
using it always makes me a little nervous, just because
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;I don't understand it very well.
&lt;/li&gt;
&lt;li&gt;Like almost everything else, there seem to be so many libraries
for doing this in Python, and I'm never sure which one to use, or
which one I used the last time around.  Not understanding the
protocol also doesn't let me debug anything that comes up.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
To fix this, I set about to read and understand the &lt;a href="http://tools.ietf.org/html/rfc6749"&gt;OAuth2 protocol&lt;/a&gt;.
This blog post is an attempt to record it for future reference, and
possibly act as a reference for others.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Why OAuth&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
OAuth is simply a way for an end-user to allow third parties to use
protected data, without sharing the user's credentials with the
third-party.
&lt;/p&gt;

&lt;p&gt;
For example, an end-user (Jane) can grant a printing service
(Printo) access to her protected photos stored at a photo-sharing
service (Picasa), without sharing her username and password with the
printing service.  Instead, she authenticates directly with a server
trusted by the photo-sharing service, which issues the printing
service delegation-specific credentials. (example from the OAuth 2.0
spec)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Protocol Flow&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;img src="http://punchagan.muse-amuse.in/images/536281e1af42c5729864722aa6e9019ef9e93c0a.png"&gt;


&lt;p&gt;
The flow occurs through a sequence of user actions, client requests
and user-agent (browser) redirects.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;(A) Printo asks Jane to allow using Picasa Data. The request can
be sent directly to Jane, but is usually routed via
Picasa/Google.
&lt;/li&gt;

&lt;li&gt;(B) Printo gets back an authorization grant, which is a
credential representing Jane's authorization or approval.  The
type of the actual grant credential depends on the type of
request that Printo used.
&lt;/li&gt;

&lt;li&gt;(C, D) Printo gets back to Google with the credentials it obtained
in the previous step and obtains a token that it can use to talk
with Picasa.
&lt;/li&gt;

&lt;li&gt;(E, F) Printo asks for the desired photo with the token it
obtained previously, and Picasa gives back the photo to print.
Jane gets her framed photo!
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
But before any of this happens, the client needs to register with
the authorization server and obtain a &lt;code&gt;client_id&lt;/code&gt; and
&lt;code&gt;client_secret&lt;/code&gt;, that will be used to identify the client making
the requests.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Pythonized "authorization code" work-flow.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
The OAuth2 spec allows the authorization request/grant to be of 4
different types.  It also allows some flexibility in the token
type.
&lt;/p&gt;

&lt;p&gt;
In my experience, the most common work-flow seems to be using an
&lt;i&gt;authorization code&lt;/i&gt; as an authorization grant, and using a &lt;i&gt;Bearer&lt;/i&gt;
type token.  This work-flow is explained in the diagram below (taken
from the spec document).  This diagram zooms in, onto the steps A-D
in the diagram above.
&lt;/p&gt;

&lt;img src="http://punchagan.muse-amuse.in/images/8a0997a6a233baf9a6ff6c80998f8b1974826484.png"&gt;

&lt;p&gt;
This &lt;a href="https://gist.github.com/punchagan/76e8771fc26cd243f3ac"&gt;python code snippet&lt;/a&gt; is a simple implementation of this
workflow, using the Hacker School API.
&lt;/p&gt;

&lt;script src="https://gist.github.com/76e8771fc26cd243f3ac.js"&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;Conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
I think, I understand the OAuth2 spec a lot better now, and hope
that this will help others understand it, too.  And more
importantly, I won't get nervous when I have to add it to my
projects.
&lt;/p&gt;

&lt;p&gt;
Also, &lt;a href="https://github.com/idan/oauthlib"&gt;oauthlib&lt;/a&gt; for Python seems to be a pretty thorough
implementation of the spec, and &lt;a href="https://github.com/requests/requests-oauthlib"&gt;requests-oauthlib&lt;/a&gt; seems to wrap it
for use with requests.  I think I'm going to use this in my future
projects.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>hackerschool</category><category>oauth2</category><guid>http://punchagan.muse-amuse.in/posts/oauth2-demystified.html</guid><pubDate>Fri, 20 Jun 2014 14:09:51 GMT</pubDate></item><item><title>Org based posts in Nikola</title><link>http://punchagan.muse-amuse.in/posts/org-based-posts-in-nikola.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
&lt;a href="http://binchen.org/"&gt;Chen Bin&lt;/a&gt; asked me to share my Nikola+Org work-flow, and share an
example post.
&lt;/p&gt;

&lt;p&gt;
The org source for any post can be found by changing the URL of a post
from &lt;code&gt;.html&lt;/code&gt; to &lt;code&gt;.org&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
I don't have much of a work-flow, because I don't post too often, but
here is what I typically do, to make a new post.
&lt;/p&gt;

&lt;p&gt;
I start off by creating a new post using
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;nikola&lt;/span&gt; &lt;span class="n"&gt;new_post&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and then give the post a title and start editing the post in Emacs.
&lt;/p&gt;

&lt;p&gt;
I have a simple snippet that lets me insert tags, based on existing
tags.
&lt;/p&gt;

&lt;script src="https://gist.github.com/6629020.js"&gt;&lt;/script&gt;

&lt;p&gt;
Once I'm happy with the content of a post, I run &lt;code&gt;nikola auto&lt;/code&gt; to
build the source and serve it locally, and see if the post "looks"
reasonable, after being rendered.
&lt;/p&gt;

&lt;p&gt;
Once, I'm happy with it, I commit the post and deploy it using &lt;code&gt;nikola
deploy&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;you&lt;/span&gt; &lt;span class="nt"&gt;may&lt;/span&gt; &lt;span class="nt"&gt;use&lt;/span&gt; &lt;span class="nt"&gt;rsync&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="s2"&gt;"rsync -rav output/* joe@my.site:/srv/www/site"&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;And&lt;/span&gt; &lt;span class="nt"&gt;then&lt;/span&gt; &lt;span class="nt"&gt;do&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;backup&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;or&lt;/span&gt; &lt;span class="nt"&gt;ping&lt;/span&gt; &lt;span class="nt"&gt;pingomatic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;To&lt;/span&gt; &lt;span class="nt"&gt;do&lt;/span&gt; &lt;span class="nt"&gt;manual&lt;/span&gt; &lt;span class="nt"&gt;deployment&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;it&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="cp"&gt;[]&lt;/span&gt;
&lt;span class="nt"&gt;DEPLOY_COMMANDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'nikola orphans|xargs rm || true'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'git checkout master'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'nikola build'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'./commit-changes || true'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'nikola github_deploy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="cp"&gt;]&lt;/span&gt;


&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;List&lt;/span&gt; &lt;span class="nt"&gt;XML-RPC&lt;/span&gt; &lt;span class="nt"&gt;services&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;preferred&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;PING_XMLRPC_SERVICES&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;HTTP&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;GET&lt;/span&gt; &lt;span class="nt"&gt;services&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;web&lt;/span&gt; &lt;span class="nt"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;PING_GET_SERVICES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Consider&lt;/span&gt; &lt;span class="nt"&gt;adding&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nt"&gt;nikola&lt;/span&gt; &lt;span class="nt"&gt;ping&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;last&lt;/span&gt; &lt;span class="nt"&gt;entry&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;DEPLOY_COMMANDS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I also have a plugin, that posts captured bookmarks and quotes onto
the blog, with a single command. I should probably make the sources of
my blog open, and push it onto GitHub.
&lt;/p&gt;</description><category>blog</category><category>nikola</category><category>orgmode</category><guid>http://punchagan.muse-amuse.in/posts/org-based-posts-in-nikola.html</guid><pubDate>Sun, 20 Apr 2014 12:05:10 GMT</pubDate></item><item><title>Let there be light, in skype!</title><link>http://punchagan.muse-amuse.in/posts/let-there-be-light-in-skype.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
At home, my video would always show a silhouette in G+ and Skype, and
I always thought that this was because the lighting at home was not
sufficient.  At office, the video was decent.  But, moving to sit
right under the light also didn't help much.
&lt;/p&gt;

&lt;p&gt;
Struggling with a bunch of tools like &lt;code&gt;v4lctl&lt;/code&gt;, &lt;code&gt;guvcview&lt;/code&gt; didn't
help. But, during these struggles I noticed that &lt;code&gt;cheese&lt;/code&gt; would show
me bright and cheerful, while all the other programs showed my
silhouette.
&lt;/p&gt;

&lt;p&gt;
I set out to "fake" the output of &lt;code&gt;cheese&lt;/code&gt; as a video device that
skype and other programs could use. But, I didn't have to go all the
way.  I ended up using &lt;a href="https://github.com/umlaeute/v4l2loopback/"&gt;v4l2loopback&lt;/a&gt; to create a loopback video device,
and just using &lt;code&gt;gst-launch&lt;/code&gt; to redirect video to that device, did the
trick!  Thanks gstreamer!  Thanks v4l2loopback! :)
&lt;/p&gt;

&lt;p&gt;
Here's a convenient &lt;a href="https://gist.github.com/punchagan/9859210"&gt;script&lt;/a&gt; to use it every time I need it.
&lt;/p&gt;

&lt;script src="https://gist.github.com/9859210.js"&gt;&lt;/script&gt;</description><category>hack</category><category>linux</category><guid>http://punchagan.muse-amuse.in/posts/let-there-be-light-in-skype.html</guid><pubDate>Sat, 29 Mar 2014 17:52:27 GMT</pubDate></item><item><title>Scraping Google Groups</title><link>http://punchagan.muse-amuse.in/posts/scraping-google-groups.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I was playing around with a few ideas for creating a timeline for the
mumbai ultimate group, and as a part of playing around with stuff, for
that idea, I ended up wanting to scrape all the emails on our google
group.  After looking around a little bit, I failed to find anything
that claims to be able to do this.
&lt;/p&gt;

&lt;p&gt;
So I ended up writing my own &lt;a href="https://gist.github.com/punchagan/7947337"&gt;hacky script&lt;/a&gt; to download all the emails
sent on the group.  Like I said, this is a hack and can be improved
quite a bit, but I am not inclined to do anything about it, right
now.  Since, everything about google groups is ajaxy, this script uses
selenium and does things on the page, that one would do by hand.  It's
not something that I am proud of, but it does the job!
&lt;/p&gt;</description><category>email</category><category>hack</category><category>idea</category><category>mumbai</category><category>ultimate</category><guid>http://punchagan.muse-amuse.in/posts/scraping-google-groups.html</guid><pubDate>Wed, 01 Jan 2014 00:55:58 GMT</pubDate></item><item><title>Cold</title><link>http://punchagan.muse-amuse.in/posts/cold.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
It was a pleasant Saturday evening, in the middle of the winter.
Christmas was just round the corner and love, in the air. The sun was
just setting, and everything outside his window was given a fresh coat
of snow, tickled by the red, quickly fading light. Not that he
noticed. He stared blankly out of the window, looking at nothing in
particular. He had just woke up from his afternoon nap, but he'd buy
it, if you told him he'd been sleeping for a year…
&lt;/p&gt;

&lt;p&gt;
You could see the icy river, crawling ahead, from his window.  People
walking over the bridge, a few camera flashes going off, people
stopping over and looking far ahead into the horizon, collecting their
thoughts, couples walking hand-in-hand enjoying each others'
company… You could see it all, from up there! But, as they say, you
only see what you look for. And he, couldn't see any of this. His
looked out of his window, and saw none of this.
&lt;/p&gt;

&lt;p&gt;
He is walking down the same bridge. He didn't know where he was going;
his head at least. His legs did; as always. He was walking down in his
regular yellow shirt and black jeans, that you could mistake for a
uniform, if you followed him for a few days. Extremely under-dressed
for the chilly night, one would say. He kept walking down the main
street, lined with shops brightly lit up for the festive season. The
pavement bustled with with people walking with a spring in their step
– the spring that the festive season, and all the love in the air
brought to you. Not that he noticed it, or had any of it in his step.
&lt;/p&gt;

&lt;p&gt;
Soon, he's walking through the park. The park that was built to
celebrate time, ticking away, furiously. Or to celebrate the time
everyone in the world had, to enjoy themselves. He walked past the
skating rink, with lots of people having the time of their life ice
skating, and a lot more, awaiting their turn. The first timers, old
and young, making up for their inexperience, with their excitement;
holding onto whatever they can, to finish their next round, to start
their next. The veterans, taking the center-stage and showing off
their moves! He was barely aware of their presence and just walked on,
past all the action.
&lt;/p&gt;

&lt;p&gt;
The music festival; he walked past it to, like the crowd didn't exist,
the noise didn't, the music didn't; like there was nothing happening!
The fountain "felt" no different. The cold breeze, did sprinkle the
water to quite a distance and everybody kept a safe distance to avoid
the chilling shower, except for the kids, who found it amusing to run
into the shower for a split second and run back madly. How could he
walk just by it, and not feel a thing!
&lt;/p&gt;

&lt;p&gt;
The lakefront. That is where his legs always brought him, at the
end. The brilliantly lit skyline was a delight to watch, but I don't
believe he saw any of it. He just stared into it, blankly. He kept
staring, as the night got chillier, and the neighborhood kept getting
more and more deserted. Seconds ticked away, minutes and hours passed
by! He stayed on, staring ahead. It didn't matter how much below zero
the mercury had gone. This wasn't the first night he was spending
staring into the nothingness. It turned out to be the coldest night,
in a decade. But that didn't matter to him. Nothing did. Nothing has,
for a while now; Ever since he turned cold.
&lt;/p&gt;</description><category>blab</category><category>cold</category><category>fiction</category><category>life</category><category>story</category><guid>http://punchagan.muse-amuse.in/posts/cold.html</guid><pubDate>Wed, 13 Nov 2013 06:03:45 GMT</pubDate></item><item><title>A smarter 404 page.</title><link>http://punchagan.muse-amuse.in/posts/a-smarter-404-page.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
&lt;a href="http://twitter.com/avudem"&gt;Voodoo&lt;/a&gt; found a broken link referring to a one of my posts, on Quora.
Given that I have changed my site generator a bunch of times now, it
is quite possible that there are other broken links at various other
places.  So, I implemented a smart &lt;a href="http://punchagan.muse-amuse.in/this-is-a-fun-hack"&gt;404 page&lt;/a&gt; for the site, yesterday.
It is very similar to something I came across on &lt;a href="http://brettterpstra.com/2013/04/07/fun-with-intelligent-404-pages/"&gt;brettterpstra&lt;/a&gt;'s site.
I just &lt;a href="http://punchagan.muse-amuse.in/assets/js/suggestions.js"&gt;hooked up&lt;/a&gt; &lt;a href="http://kiro.me/projects/fuse.html"&gt;fuse.js&lt;/a&gt; with Nikola's &lt;a href="http://getnikola.com/handbook.html#local-search"&gt;tipue-search plugin&lt;/a&gt;'s output
file.  My glue code essentially, just figures out the search term from
the URL, performs a Fuse search on the json data created by Nikola's
search plugin, and returns a list of top 5 results.  It just took me
about an hour to write, but is pretty useful, I think.
&lt;/p&gt;</description><category>code</category><category>fuzzy-search</category><category>hack</category><category>js</category><guid>http://punchagan.muse-amuse.in/posts/a-smarter-404-page.html</guid><pubDate>Mon, 11 Nov 2013 17:36:53 GMT</pubDate></item><item><title>A Month with Martin</title><link>http://punchagan.muse-amuse.in/posts/a-month-with-martin.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
At my &lt;a href="http://enthought.com"&gt;$dayjob&lt;/a&gt;, for the most part of October, I had the fortune of
pair programming with &lt;a href="https://plus.google.com/114995175796183910458/posts"&gt;Martin&lt;/a&gt; and it was an amazing learning
experience!  To share these lessons with my colleagues, I made a small
presentation at lunch, to my colleagues.  &lt;a href="https://rawgithub.com/punchagan/340e1350fdfc766c6599/raw/ca1f5fe9bfc1cc503cd8a524e350bd29e8f5f33d/month-with-martin.html"&gt;Here are the slides&lt;/a&gt; for the
presentation.
&lt;/p&gt;</description><guid>http://punchagan.muse-amuse.in/posts/a-month-with-martin.html</guid><pubDate>Sun, 10 Nov 2013 22:13:17 GMT</pubDate></item><item><title>Bookmarks and Quotes plugin</title><link>http://punchagan.muse-amuse.in/posts/bookmarks-and-quotes-plugin.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I used to have a separate page for bookmarks and quotes on the old
blog.  They will now be shared as regular posts with 5 or more
bookmarks/quotes.  I use a bookmarklet in my browser to capture links
to an org-file using org-capture protocol and then I have a small
plugin to Nikola, that looks at such captured bookmarks and quotes and
makes new posts out of them.  This workflow is inspired by Brett
Trepestra's &lt;a href="http://brettterpstra.com/2013/01/15/a-web-excursions-system-for-static-blogs/"&gt;web excursions&lt;/a&gt; plugin.
&lt;/p&gt;

&lt;p&gt;
The plugin is currently a part of my blog source, and not published to
Nikola's plugin repository since it is very specific to my setup.  But
if anybody is interested, I can publish the code somewhere public.
&lt;/p&gt;

&lt;p&gt;
If you are interested to get these links and bookmarks into your feed
reader, you can subscribe to their feed: &lt;a href="http://punchagan.muse-amuse.in/categories/quotes.xml"&gt;quotes&lt;/a&gt;, &lt;a href="http://punchagan.muse-amuse.in/categories/bookmarks.xml"&gt;bookmarks&lt;/a&gt;.  These
posts will also make it to the main feed, though.
&lt;/p&gt;</description><category>blog</category><category>code</category><category>nikola</category><category>orgmode</category><guid>http://punchagan.muse-amuse.in/posts/bookmarks-and-quotes-plugin.html</guid><pubDate>Sun, 20 Oct 2013 00:26:13 GMT</pubDate></item><item><title>Blogging with Nikola and Org-mode</title><link>http://punchagan.muse-amuse.in/posts/blogging-with-nikola-and-org-mode.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
Sigh! I made yet another change to the way this blog gets published.
But, I have a feeling this mechanism, is here to stay!
&lt;/p&gt;

&lt;p&gt;
We've been using Nikola quite regularly for our &lt;a href="http://ultimatesport.in"&gt;Ultimate site&lt;/a&gt;, and I
quite like it.  I've also contributed a bunch of features to Nikola to
get it to work the way I would like it to.  This weekend I ported my
blog from &lt;a href="https://github.com/renard/o-blog"&gt;o-blog&lt;/a&gt; to &lt;a href="http://getnikola.com"&gt;Nikola&lt;/a&gt;.  The only thing that was stopping me
from doing it, until now is the fact that all my posts are in
org markup and porting them over to one of the formats that Nikola
supports would be a PITA.  So, I wrote a &lt;a href="http://plugins.getnikola.com/#orgmode"&gt;pretty simple plugin&lt;/a&gt; to
Nikola to support posting from org files.  And then with a &lt;a href="https://gist.github.com/punchagan/6970578"&gt;little
Python&lt;/a&gt;, I was able to move everything over to use Nikola.
&lt;/p&gt;

&lt;p&gt;
Hopefully, I'll keep my blog more updated, from here on!
&lt;/p&gt;</description><category>blog</category><category>hack</category><category>orgmode</category><guid>http://punchagan.muse-amuse.in/posts/blogging-with-nikola-and-org-mode.html</guid><pubDate>Thu, 17 Oct 2013 02:40:47 GMT</pubDate></item><item><title>Unread (8,762)</title><link>http://punchagan.muse-amuse.in/posts/unread-8762.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I am unread.  Unlike you, who classify yourselves as well-read or
not, I am classified as unread or not.  Well, you could call me
not well-read too, I guess.  I was looked at once, my innards
glanced through, and was hurriedly marked as unread, starred and
tagged.  Given my length, the care with which I was composed, and
the flurry with which I was stowed away, I probably contain
something important, to be read at the opportune moment, something
to be cherished and to be replied to with diligence and care.  I
felt a sense of pride.
&lt;/p&gt;

&lt;p&gt;
I got composed and sent weeks ago, and have been lying here
untouched, since.  I get buried deeper and deeper every day, with
a daily flood of newer stuff piling up onto me.  While my
composer, eagerly awaits a reply, (less and less eagerly each day,
though) I have lost all hope of being read and replied to.  I
curse myself for carrying something so important.  A thousand
other replies have been sent, and a few thousand others composed
here, but my turn hasn't come, yet.
&lt;/p&gt;

&lt;p&gt;
How I wish, it'd be my turn today.  How I wish, I could push my
way up through to the top of the stack.  How I wish, I could see
the eager wait come to an end!  How I wish, I'm given the
attention I deserved, today!  Reply, ASAP!
&lt;/p&gt;

&lt;p&gt;
PS: Apologies for all those emails that are still starred and
unread, in my Inbox…
&lt;/p&gt;</description><category>blab</category><category>fiction</category><category>wait</category><guid>http://punchagan.muse-amuse.in/posts/unread-8762.html</guid><pubDate>Tue, 04 Jun 2013 00:46:00 GMT</pubDate></item></channel></rss>