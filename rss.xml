<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Noetic Nought</title><link>https://punchagan.muse-amuse.in/</link><description>For an idle mind is the devil's workshop.</description><atom:link href="https://punchagan.muse-amuse.in/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 15 Jan 2016 17:10:32 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Partial postgres db dumps for a Django app</title><link>https://punchagan.muse-amuse.in/posts/partial-postgres-db-dumps-for-a-django-app.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
Off late, I have been working with a large &lt;code&gt;postgres&lt;/code&gt; database that is used by
an app built in &lt;code&gt;Django&lt;/code&gt;.  I wanted a partial dump of the database to try out
some experimental clean up scripts.  I haven't really used databases before,
and the last time I had to do this I did it in a pretty ad-hoc fashion.  This
time around, I tried to do it more methodically and to document it.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;The Django Route&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I looked around for tools that let you do this, and found &lt;a href="https://github.com/davedash/django-fixture-magic"&gt;django-fixture-magic&lt;/a&gt;.
I first tried it out on my older partial dump (10% as large as the original db)
and it turned out to be reasonably fast and worked well, after making a &lt;a href="https://github.com/davedash/django-fixture-magic/pull/35"&gt;few
changes&lt;/a&gt; to get it working with Python 3.x.  Its &lt;code&gt;kitchensink&lt;/code&gt; flag to the
&lt;code&gt;dump_object&lt;/code&gt; seemed like a promising option, but &lt;b&gt;didn't&lt;/b&gt; really seem to get all
the required tables for ManyToManyFields.  I worked around it, by getting a
dump of all the models which were related using Django's &lt;code&gt;dumpdata&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;Get a dump with objects of interest&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
The &lt;code&gt;dump_object&lt;/code&gt; command lets you run commands to select the objects that you
want to have in the dump, and that is quite a useful thing.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py dump_object dataset.Product -k --query &lt;span class="s1"&gt;'{"subcategory_id__in": [1886, ...]}'&lt;/span&gt; &amp;gt; products.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Also, get a dump of related tables.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Dump of related fields&lt;/span&gt;
python manage.py dumpdata dataset.Attribute &amp;gt; attributes.json
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;Create the new empty db&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
Next, create a new database where this fixture can be loaded!
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Create the db&lt;/span&gt;
sudo su - postgres
createdb mydb

&lt;span class="c"&gt;# Create a user, if required&lt;/span&gt;
createuser -P
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2-1" class="outline-4"&gt;
&lt;h4 id="sec-1-2-1"&gt;Grant access to the user&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-1"&gt;
&lt;p&gt;
In the &lt;code&gt;psql&lt;/code&gt; prompt type the following to grant the user permissions for the
database.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt; &lt;span class="k"&gt;PRIVILEGES&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;mydb&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="n"&gt;myuser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;Fix settings.py and create tables for the models.&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
Make changes to &lt;code&gt;settings.py&lt;/code&gt; to use the newly created database, and then
create the tables used by the app, and then load the data.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py syncdb
python manage.py loaddata products.json
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;Too slow!&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
This method worked and was reasonably fast when I was trying to get 20k rows
from a table with about 200k rows, with all the dependencies.
&lt;/p&gt;

&lt;p&gt;
But, when I tried to get a dump of about 200k rows from a table with 2M rows,
it was way too slow to be of any use.  There could've been a couple of reasons
for this, which I didn't have the time to look into, and debug.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;The web-server where the &lt;code&gt;Django&lt;/code&gt; app was running, and the &lt;code&gt;db&lt;/code&gt; server with
the &lt;code&gt;postgres&lt;/code&gt; database were on different machines in separate datacenters,
which could've been adding a significant amount of latency.
&lt;/li&gt;

&lt;li&gt;Just the size of the database being much larger could be making it slower?
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
These are things I should be looking into and learning about, when I have more
time at hand.  For now, I needed a quicker way to get a dump.  Even though the
raw SQL route was more manual, it turned out to be much quicker.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Raw SQL dump route&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;Get a dump of the interesting tables&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
First, I had to get a dump of all the tables with the data I was interested in,
one-by-one.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;COPY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="ss"&gt;"dataset_product"&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"dataset_product"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"subcategory_id"&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;319557&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;94589&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;332&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;406&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;626&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1886&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="ss"&gt;"dataset_product"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"gender_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="s1"&gt;'/tmp/products.tsv'&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="ss"&gt;"dataset_photo"&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="ss"&gt;"dataset_photo"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"product_id"&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;U0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"id"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="ss"&gt;"dataset_product"&lt;/span&gt; &lt;span class="n"&gt;U0&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"subcategory_id"&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;319557&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;94589&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;332&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;406&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;626&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1886&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;U0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;"gender_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="s1"&gt;'/tmp/photos.tsv'&lt;/span&gt;

&lt;span class="c1"&gt;-- Copy a bunch of other tables!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;Load the data from the dumps&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;-- syncdb&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; &lt;span class="n"&gt;dataset_product&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s1"&gt;'/tmp/products.tsv'&lt;/span&gt; &lt;span class="k"&gt;ENCODING&lt;/span&gt; &lt;span class="s1"&gt;'UTF8'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; &lt;span class="n"&gt;dataset_photo&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s1"&gt;'/tmp/photos.tsv'&lt;/span&gt; &lt;span class="k"&gt;ENCODING&lt;/span&gt; &lt;span class="s1"&gt;'UTF8'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- Copy a bunch of other tables!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;Make tables writable&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
Some of the tables did not let me write anything to them, until I &lt;a href="http://centoshowtos.org/web-services/django-and-postgres-duplicate-key/"&gt;altered the
sequence&lt;/a&gt; for these tables.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4" class="outline-3"&gt;
&lt;h3 id="sec-2-4"&gt;Automating&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-4"&gt;
&lt;p&gt;
It would be pretty nice if all of this was automated – allow a user to enter
exactly the same kind of a query that &lt;code&gt;django-fixture-magic&lt;/code&gt; lets you run, and
figure out the SQL copies that need to be done to get the requested dump. Its
something that currently would qualify as yak-shaving, but may be a handy thing
to have. Someone somewhere possibly already has something that does this.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>blag</category><category>django</category><category>postgres</category><category>sql</category><guid>https://punchagan.muse-amuse.in/posts/partial-postgres-db-dumps-for-a-django-app.html</guid><pubDate>Sun, 10 Jan 2016 00:09:18 GMT</pubDate></item><item><title>Clock in and get-shit-done</title><link>https://punchagan.muse-amuse.in/posts/clock-in-and-get-shit-done.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I had &lt;a href="https://punchagan.muse-amuse.in/posts/simple-org-clock-and-gnomepidgin-integration.html"&gt;setup&lt;/a&gt; a couple of hooks about an year ago that turn off all notifications
while I'm clocking in. But, I find myself switching to the browser and jumping
to twitter, out of habit.  I've tried &lt;a href="https://github.com/leftnode/get-shit-done"&gt;get-shit-done&lt;/a&gt; in the past to help myself
break this habit. But enabling get-shit-done manually is step that quickly
became a non-habit.
&lt;/p&gt;

&lt;p&gt;
So, I hooked up get-shit-done into an &lt;code&gt;org-clock-in-hook&lt;/code&gt;.  The snippet below
is what I added into a function that is added to this hook.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with-temp-buffer&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cd&lt;/span&gt; &lt;span class="s"&gt;"/sudo::/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;shell-command&lt;/span&gt; &lt;span class="s"&gt;"HOME=/home/punchagan get-shit-done work"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;get-shit-done&lt;/code&gt; needs to be run as &lt;code&gt;root&lt;/code&gt;, since it does things like modifying
&lt;code&gt;/etc/hosts&lt;/code&gt; and restarting networking.  Just calling &lt;code&gt;get-shit-done&lt;/code&gt; as a
shell command fails with the error &lt;code&gt;sudo: no tty present and no askpass program
specified&lt;/code&gt;.  I found a couple of ways to fix this. The snippet above
piggy-backs on tramp to allow for a way to enter the password for &lt;code&gt;sudo&lt;/code&gt; to
use. This also means that I don't need to enter the password, as long as the
tramp connection is alive.
&lt;/p&gt;

&lt;p&gt;
For someone worried about having such an easy way of running something as
&lt;code&gt;root&lt;/code&gt;, using something like &lt;code&gt;gnome-ssh-askpass&lt;/code&gt; as the askpass program might
work better.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;shell-command&lt;/span&gt; &lt;span class="s"&gt;"SUDO_ASKPASS=\"/usr/lib/openssh/gnome-ssh-askpass\" get-shit-done work"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>blag</category><category>emacs</category><category>orgmode</category><guid>https://punchagan.muse-amuse.in/posts/clock-in-and-get-shit-done.html</guid><pubDate>Tue, 22 Dec 2015 14:17:04 GMT</pubDate></item><item><title>Elfeed hook to fetch full content</title><link>https://punchagan.muse-amuse.in/posts/elfeed-hook-to-fetch-full-content.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I have started to use &lt;a href="http://pinboard.in"&gt;Pinboard&lt;/a&gt;'s &lt;code&gt;unread&lt;/code&gt; tag as my to-read list.  It has a
bookmark-let that works pretty well for adding stuff into my "to-read" list.  I
then catch up on this list using &lt;code&gt;elfeed&lt;/code&gt; and subscribing to the unread items'
RSS feed.  The work-flow is pretty nice for adding stuff into the list, and
finding items on the list. But, when it comes to the actual reading part, the
entries in the feed don't have the actual content I want to read, and I end up
opening the links in a browser.
&lt;/p&gt;

&lt;p&gt;
Inspired by a &lt;a href="https://github.com/sursh/blaggregator/pull/80#issuecomment-165849126"&gt;comment from FiloSottile&lt;/a&gt;, I realized it should be pretty easy to
setup a hook that fetches the actual content to make my reading work-flow
smoother. I wrote a &lt;a href="https://github.com/punchagan/dot-files/blob/master/bin/get_article.py"&gt;small script&lt;/a&gt;, using &lt;a href="https://github.com/buriy/python-readability"&gt;python-readability&lt;/a&gt;, to fetch the page
content, given a URL. This script is then hooked onto &lt;code&gt;elfeed-new-entry-hook&lt;/code&gt;,
to fetch content of for new entries as they are fetched.  All the old entries
can be easily fixed with a single call to &lt;code&gt;elfeed-apply-hooks-now&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/get-url-content&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Fetches the content for a url."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;shell-command-to-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"~/bin/get_article.py %s"&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/get-entry-content&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Fetches content for pinboard entries that are not tweets."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;entry&lt;/span&gt; &lt;span class="nv"&gt;elfeed-show-entry&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-entry-link&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;feed-id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-deref&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-entry-feed-id&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-deref&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-entry-content&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s-matches?&lt;/span&gt; &lt;span class="s"&gt;"feeds.pinboard.in/"&lt;/span&gt; &lt;span class="nv"&gt;feed-id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s-matches?&lt;/span&gt; &lt;span class="s"&gt;"twitter.com/\\|pdf$\\|png$\\|jpg$"&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-equal&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pc/get-url-content&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-entry-content&lt;/span&gt; &lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;elfeed-ref&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'elfeed-new-entry-hook&lt;/span&gt; &lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;pc/get-entry-content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>blag</category><category>elfeed</category><category>emacs</category><category>hack</category><category>pinboard</category><guid>https://punchagan.muse-amuse.in/posts/elfeed-hook-to-fetch-full-content.html</guid><pubDate>Sat, 19 Dec 2015 08:12:29 GMT</pubDate></item><item><title>Say Howdy with Emacs!</title><link>https://punchagan.muse-amuse.in/posts/say-howdy-with-emacs.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
Staying in touch with people is something I'm not very good at.  Since I am not
on popular (among my friends/family) networks – FB and Whatsapp – I don't
even see random updates from people, to get some sense of being in touch.
&lt;/p&gt;

&lt;p&gt;
I recently read some old posts by Sacha Chua and was inspired by how much code
she had for &lt;a href="http://sachachua.com/blog/category/geek/emacs/bbdb/"&gt;contact management&lt;/a&gt; in her old blog posts.  I was inspired by &lt;a href="http://sachachua.com/blog/2005/05/keeping-in-touch/"&gt;this
post&lt;/a&gt; in particular to try and be more meticulous about how I stay in touch with
people. Michael Fogleman &lt;a href="https://mwfogleman.github.io/posts/08-01-2015-emacs-can-keep-in-touch.html"&gt;blogged&lt;/a&gt; about his contact management work-flow using
&lt;code&gt;keepintouch&lt;/code&gt;. It seemed to do most of what I wanted, but I wanted this to be
integrated with my &lt;code&gt;org-contacts-db&lt;/code&gt; and I felt having native elisp code would
make it easier to hook up email, chat, etc. to this.
&lt;/p&gt;

&lt;p&gt;
I ended up writing a small utility called &lt;a href="https://github.com/punchagan/howdy/"&gt;howdy&lt;/a&gt; to help me keep in touch with
people. It currently has only a couple of features:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;M-x howdy&lt;/code&gt; lets me update the last contacted timestamp for a contact.
&lt;/li&gt;
&lt;li&gt;Shows me contacts that I'm out of touch in the agenda, once I add the
following snippet to an agenda file.
&lt;div class="highlight"&gt;&lt;pre&gt;* Howdy
  %%(howdy-howdy)
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I also have a few hooks to hook up jabber messages and email to update the db.
I've added them to &lt;code&gt;howdy-hooks.el&lt;/code&gt; in case anybody else wants to use them.
They can also be used as examples to write other hooks. Feel free to contribute
other hooks or suggest improvements.  The library also ships with a modest test
suite, that will hopefully make it easier for others to contribute.
&lt;/p&gt;

&lt;p&gt;
I'm looking forward to experimenting with this over the next few weeks and
improving it. Hopefully, it'll help me keep in touch, better than I do now.
&lt;/p&gt;</description><category>blag</category><category>code</category><category>emacs</category><category>hack</category><category>howdy</category><guid>https://punchagan.muse-amuse.in/posts/say-howdy-with-emacs.html</guid><pubDate>Thu, 28 May 2015 13:09:24 GMT</pubDate></item><item><title>WiFi Channels &amp; my router's random invisibility</title><link>https://punchagan.muse-amuse.in/posts/wifi-channels-my-routers-random-invisibility.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
To update some data plan changes, I had to restart my router today.  I did so
from the (web) admin interface, from my dad's laptop. Guess what!  The router
goes invisible (to the laptop), after the restart!  Other devices were still
happily connected.
&lt;/p&gt;

&lt;p&gt;
There were a few occasions in the past when this laptop had failed to find our
home router.  The solution that worked for my dad before was to restart the
router; once, or may be a couple of times.  But, this time it didn't work.
&lt;/p&gt;

&lt;p&gt;
I had a feeling this was something to do with "Channels", but I had no idea
what was going on.
&lt;/p&gt;

&lt;p&gt;
I logged onto the router and started looking at the Wireless settings in the
hope of finding some clue, and there it was! &lt;code&gt;Wireless Channel: Auto Scan&lt;/code&gt;
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://punchagan.muse-amuse.in/images/auto-scan.jpg" alt="auto-scan.jpg"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
It was anybody's guess that some channels that the router uses weren't
supported by my dad's laptop.  The restarts &lt;b&gt;sometimes&lt;/b&gt; helped because the
router would scan for channels that it thinks would work well, and end-up using
something that the laptop's wifi card supported.
&lt;/p&gt;

&lt;p&gt;
The router only had options of channels from 1 to 13.  To see what channels a
wifi card supports, you can run the &lt;code&gt;iwlist freq&lt;/code&gt; command.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;iwlist freq
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;eth1      26 channels in total; available frequencies :
	  Channel 01 : 2.412 GHz
	  Channel 02 : 2.417 GHz
	  Channel 03 : 2.422 GHz
	  Channel 04 : 2.427 GHz
	  Channel 05 : 2.432 GHz
	  Channel 06 : 2.437 GHz
	  Channel 07 : 2.442 GHz
	  Channel 08 : 2.447 GHz
	  Channel 09 : 2.452 GHz
	  Channel 10 : 2.457 GHz
	  Channel 11 : 2.462 GHz
	  Channel 12 : 2.467 GHz
	  Channel 13 : 2.472 GHz
	  Channel 14 : 2.484 GHz
	  Channel 36 : 5.18 GHz
	  Channel 38 : 5.19 GHz
	  Channel 40 : 5.2 GHz
	  Channel 42 : 5.21 GHz
	  Channel 44 : 5.22 GHz
	  Channel 46 : 5.23 GHz
	  Channel 48 : 5.24 GHz
	  Channel 149 : 5.745 GHz
	  Channel 153 : 5.765 GHz
	  Channel 157 : 5.785 GHz
	  Channel 161 : 5.805 GHz
	  Channel 165 : 5.825 GHz
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So, the laptop's wifi card support all the channels that the router could use.
&lt;code&gt;iwlist freq&lt;/code&gt; also gives the current Channel if the device is already connected
to a router.  I ran this on my laptop and found that the router was using
&lt;code&gt;Channel 13&lt;/code&gt;.  Why the hell wouldn't this work?!  I don't know!
&lt;/p&gt;

&lt;p&gt;
I decided to set a channel manually, but how do I pick a channel?  The idea of
"Auto Scan" is to find a channel that has relatively low interference.  How do
we do this manually?  &lt;code&gt;sudo iwlist scan&lt;/code&gt; scans for all the WiFi access points
nearby and gives detailed information about them, which includes the Channel.
&lt;/p&gt;

&lt;p&gt;
It looked like most of the routers nearby used channels 1 and 6, with a few 3s
and 4s.  Assuming, most of the other routers aren't doing this "Auto Scan"
business, I set my router to always use Channel 9, and the laptop seems to be
happily connected, now!
&lt;/p&gt;</description><category>blag</category><category>debugging</category><category>hardware</category><category>howto</category><guid>https://punchagan.muse-amuse.in/posts/wifi-channels-my-routers-random-invisibility.html</guid><pubDate>Wed, 22 Apr 2015 06:18:50 GMT</pubDate></item><item><title>Playing music using mpsyt from Emacs</title><link>https://punchagan.muse-amuse.in/posts/playing-music-using-mpsyt-from-emacs.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I've started using the wonderful &lt;a href="https://github.com/np1/mps-youtube/"&gt;mpsyt&lt;/a&gt; to play any music from youtube, since
I'm not really interested in the video.  But, since I use emacs for chat/IRC, I
end up getting youtube links into emacs and opening them opens them up in my
browser. I ended up writing some &lt;code&gt;elisp&lt;/code&gt; to play the songs from within an
instance of &lt;code&gt;mpsyt&lt;/code&gt; running inside an emacs buffer.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/short-url-at-point&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Gets the short url at point.&lt;/span&gt;

&lt;span class="s"&gt;This function is required only because&lt;/span&gt;
&lt;span class="s"&gt;`thing-at-point-url-at-point' ignores urls (without a scheme)&lt;/span&gt;
&lt;span class="s"&gt;that don't start with www."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;bounds&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thing-at-point-bounds-of-url-at-point&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;bounds&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="nv"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr&lt;/span&gt; &lt;span class="nv"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-substring-no-properties&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="nv"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr&lt;/span&gt; &lt;span class="nv"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/mpsyt-url&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mpsyt-proc-name&lt;/span&gt; &lt;span class="s"&gt;"*mpsyt*"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;;; Start a new term with *mpsyt* if there isn't one&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-process&lt;/span&gt; &lt;span class="nv"&gt;mpsyt-proc-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-buffer&lt;/span&gt; &lt;span class="nv"&gt;mpsyt-proc-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kill-buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-buffer&lt;/span&gt; &lt;span class="nv"&gt;mpsyt-proc-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ansi-term&lt;/span&gt; &lt;span class="s"&gt;"mpsyt"&lt;/span&gt; &lt;span class="s"&gt;"mpsyt"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;;; Play given url in mpsyt&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;mpsyt-proc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-process&lt;/span&gt; &lt;span class="nv"&gt;mpsyt-proc-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="c1"&gt;;; If something is already playing, stop it and play this...&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;term-send-string&lt;/span&gt; &lt;span class="nv"&gt;mpsyt-proc&lt;/span&gt; &lt;span class="s"&gt;"\n\n\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;;; We wait for a bit, since looking for the prompt seems to fail, sometimes?&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sleep-for&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;term-send-string&lt;/span&gt; &lt;span class="nv"&gt;mpsyt-proc&lt;/span&gt; &lt;span class="s"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;;; Actually send the command to playurl&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;term-simple-send&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-process&lt;/span&gt; &lt;span class="nv"&gt;mpsyt-proc-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"playurl %s"&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/mpsyt-url-at-point&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Play the URL at point using mpsyt."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url-get-url-at-point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pc/short-url-at-point&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"No URL found"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"Playing %s with mpsyt"&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pc/mpsyt-url&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The current version of mpsyt crashes when run from inside emacs due to a bug in
the code to get the terminal size, which should be fixed once this &lt;a href="https://github.com/np1/mps-youtube/pull/247"&gt;patch&lt;/a&gt; is
merged.
&lt;/p&gt;

&lt;p&gt;
I would've expected &lt;code&gt;thing-at-point-url-at-point&lt;/code&gt; to be able to find urls even
when they don't have a schema, but it tries to guess the schema from urls and
fails to work when the url starts with &lt;code&gt;youtube.com&lt;/code&gt; instead of
&lt;code&gt;www.youtube.com&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
I started off using the command-line interface of &lt;code&gt;mpsyt&lt;/code&gt; by running it using
&lt;code&gt;shell-command&lt;/code&gt; or &lt;code&gt;start-process&lt;/code&gt;.  But, it seemed useful to have a buffer of
&lt;code&gt;mpsyt&lt;/code&gt; to switch to – easier to search for new music, repeating songs, etc.
Not all tasks/actions are achievable through &lt;code&gt;mpsyt&lt;/code&gt;'s command line args.
&lt;/p&gt;

&lt;p&gt;
I ended up writing more code than I thought I would have to&lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="https://punchagan.muse-amuse.in/posts/playing-music-using-mpsyt-from-emacs.html#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;.  But, I'm
pretty happy with how this all works, right now.
&lt;/p&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="https://punchagan.muse-amuse.in/posts/playing-music-using-mpsyt-from-emacs.html#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
- Isn't it true, more often than not?
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>blag</category><category>emacs</category><category>mpsyt</category><category>python</category><guid>https://punchagan.muse-amuse.in/posts/playing-music-using-mpsyt-from-emacs.html</guid><pubDate>Mon, 20 Apr 2015 18:17:18 GMT</pubDate></item><item><title>org-drill for making it stick!</title><link>https://punchagan.muse-amuse.in/posts/org-drill-for-making-it-stick.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
Those who read the &lt;a href="http://punchagan.muse-amuse.in/posts/learning-to-use-org-drill.html"&gt;last&lt;/a&gt; &lt;a href="http://punchagan.muse-amuse.in/posts/learning-about-spaced-repetition-supermemo-org-drill-et-al.html"&gt;few&lt;/a&gt; &lt;a href="http://punchagan.muse-amuse.in/posts/more-input-sources-for-org-drill.html"&gt;posts&lt;/a&gt; here, would know that I have been
experimenting with &lt;a href="http://orgmode.org/worg/org-contrib/org-drill.html"&gt;org-drill&lt;/a&gt; (a spaced repetition extension to &lt;a href="http://orgmode.org/"&gt;Org mode&lt;/a&gt;).  I
have been using the system (almost) religiously for the past 2 months, and I do
find that it has helped a great deal! (in some respects).  I have also spent a
considerable amount of time trying to reduce the friction to put new stuff into
the system, and am constantly on the look out for further improvements.
&lt;/p&gt;

&lt;p&gt;
Using this system has definitely helped with retention, and I find that I can
recall quite a few things I have read a few weeks ago, that I would normally
have been unable to. Though, I can recall a lot of information, I have been
having a feeling of "fragmentation": the feeling of just retaining individual
bits/fragments of information, while losing out on actually internalizing the
knowledge; not seeing the big picture, etc.
&lt;/p&gt;

&lt;p&gt;
Wozniak (the author of super-memo) &lt;a href="http://www.supermemo.com/articles/20rules.htm"&gt;warns against&lt;/a&gt; learning without
understanding, and memorizing before actually learning stuff.  I haven't
consciously added stuff into the system that I didn't understand (when I added
it), but, later it does feel like I have lost some connections or the
understanding, and am only holding onto the fragments of information.
&lt;/p&gt;

&lt;p&gt;
The problems as explained in (read: as interpreted by me from) &lt;a href="http://www.amazon.com/Make-Stick-Science-Successful-Learning/dp/0674729013/ref=sr_1_1/188-6768042-2821103?ie=UTF8&amp;amp;qid=1421439099&amp;amp;sr=8-1&amp;amp;keywords=make+it+stick&amp;amp;pebp=1421439103302&amp;amp;peasin=674729013"&gt;Make it Stick&lt;/a&gt;
appear to be:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;The understanding (if any) at the time of adding stuff into the
spaced-repetition system is untested.  It may just be familiarity
masquerading as understanding.
&lt;/li&gt;

&lt;li&gt;The lack of any spaced repetitions for the overall concept/understanding and
actual repetitions only for individual bits doesn't help retention of the
understanding (even if there was any, in the first place).
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
To work around this, I'm going to try adding questions that test understanding,
to the system.  The Super-memo team strongly recommends keeping the drill items
small and easy to answer.  This may be helpful in keeping each drill session
short, but I would really like to add conceptual questions to the system, and
see how it goes. I hacked &lt;code&gt;org-drill&lt;/code&gt; to allow me to type out answers, before
looking at the "correct" ones.  This is an adaptation of a system that a fellow
Hacker Schooler uses, and shared.  Also, hopefully forcing myself to type out
the answer will help me get around the problem of sometimes saying "yeah I know
that", then looking at the answer only to reaffirm the feeling of familiarity,
rather than actually testing myself.  I'm still going to continue adding quick
and short questions that test "bits of information", though. But, hopefully the
additional conceptual questions are going to tie things together and help fill
in the gaps.  Lets see how this goes!
&lt;/p&gt;

&lt;p&gt;
For those interested, my hacks to &lt;code&gt;org-drill&lt;/code&gt; below.  The code is really a
hack, and welcome any suggestions on cleaning up the code.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;advice-add&lt;/span&gt; &lt;span class="ss"&gt;'org-drill-presentation-prompt&lt;/span&gt; &lt;span class="ss"&gt;:around&lt;/span&gt; &lt;span class="ss"&gt;'pc/org-drill-presentation-prompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/org-drill-presentation-prompt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;old-fun&lt;/span&gt; &lt;span class="k"&gt;&amp;amp;rest&lt;/span&gt; &lt;span class="nv"&gt;fmt-and-args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"A presentation prompt that allows capturing answers."&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;cb&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;heading&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nth&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-heading-components&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;entry-id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-entry-get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"ID"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="s"&gt;"*org-capture-drill-answer*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;insert&lt;/span&gt; &lt;span class="s"&gt;"# Hit C-c C-c once you are done answering!\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-insert-heading-respect-content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"Answer: %s"&lt;/span&gt; &lt;span class="nv"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-entry-put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"QUESTION_ID"&lt;/span&gt; &lt;span class="nv"&gt;entry-id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;insert&lt;/span&gt; &lt;span class="s"&gt;"  "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-time-stamp-inactive&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;insert&lt;/span&gt; &lt;span class="s"&gt;"\n\n  "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;equal&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ignore-errors&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;execute-kbd-macro&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;read-key-sequence&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="nv"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;apply&lt;/span&gt; &lt;span class="nv"&gt;old-fun&lt;/span&gt; &lt;span class="nv"&gt;fmt-and-args&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;advice-add&lt;/span&gt; &lt;span class="ss"&gt;'org-drill-reschedule&lt;/span&gt; &lt;span class="ss"&gt;:around&lt;/span&gt; &lt;span class="ss"&gt;'pc/org-drill-reschedule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/org-drill-reschedule&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;old-fun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Calls the original reschedule, but also archives the answer"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;prog1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;funcall&lt;/span&gt; &lt;span class="nv"&gt;old-fun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;cb&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-buffer&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="s"&gt;"*org-capture-drill-answer*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pc/org-refile-to-datetree&lt;/span&gt; &lt;span class="s"&gt;"drill.org_archive"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="nv"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kill-buffer&lt;/span&gt; &lt;span class="s"&gt;"*org-capture-drill-answer*"&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'org-datetree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;pc/org-refile-to-datetree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;journal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Refile an entry to journal file's date-tree"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;"fRefile to: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;journal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;expand-file-name&lt;/span&gt; &lt;span class="nv"&gt;journal&lt;/span&gt; &lt;span class="nv"&gt;org-directory&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;date-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-entry-get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"TIMESTAMP_IA"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-entry-get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"TIMESTAMP"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;decode-time&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;date-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-time-string-to-time&lt;/span&gt; &lt;span class="nv"&gt;date-string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
			       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-time&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;date&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nth&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nv"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nth&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nth&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nv"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-cut-subtree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with-current-buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-buffer-visiting&lt;/span&gt; &lt;span class="nv"&gt;journal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-file-noselect&lt;/span&gt; &lt;span class="nv"&gt;journal&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;save-excursion&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-datetree-file-entry-under&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-kill&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;bookmark-set&lt;/span&gt; &lt;span class="s"&gt;"org-refile-last-stored"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"Refiled to %s"&lt;/span&gt; &lt;span class="nv"&gt;journal&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>blag</category><category>emacs</category><category>hack</category><category>hackerschool</category><category>learning</category><category>orgmode</category><guid>https://punchagan.muse-amuse.in/posts/org-drill-for-making-it-stick.html</guid><pubDate>Fri, 16 Jan 2015 19:36:54 GMT</pubDate></item><item><title>How I learnt to use Emacs' profiler</title><link>https://punchagan.muse-amuse.in/posts/how-i-learnt-to-use-emacs-profiler.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I learnt to use Emacs' profiler yesterday, after many hours of yak-shaving,
trying to get &lt;a href="https://github.com/novoid/Memacs"&gt;Memacs&lt;/a&gt; working.  Memacs is a &lt;a href="http://en.wikipedia.org/wiki/Memex"&gt;memory extension&lt;/a&gt; system for Emacs
written by Karl Voit, that I have been meaning to try out for a long time now.
Seeing lots of review posts at the turn of the year and watching Karl's recent
&lt;a href="http://emacslife.com/emacs-chats/chat-karl-voit.html"&gt;Emacs Chat with Sacha Chua&lt;/a&gt; pushed me to try and finally set it up.
&lt;/p&gt;

&lt;p&gt;
I started writing a &lt;a href="https://github.com/punchagan/Memacs/blob/chrome/memacs/chromium.py"&gt;module&lt;/a&gt; to create a Memacs file – an org archive file –
from my browser history.  It was pretty easy to write, and I had it spitting
out a huge file with 22k entries after about a couple of hours of work.  Then I
excitedly pulled up my agenda, and turned on the option to view archived
entries, only to be super-disappointed.  It turned out to be extremely slow!
Actually, the agenda never came up with the 22k entries file that I had. At
least not in 5 or so minutes, before I got impatient.  The performance was
unacceptable even when I reduced it to 5k entries.
&lt;/p&gt;

&lt;p&gt;
I was pretty sure it wasn't that slow for Karl in his &lt;a href="https://www.youtube.com/watch?v=SaKPr4J0K2I#t=999"&gt;demo&lt;/a&gt; and &lt;a href="https://twitter.com/punchagan/status/550723377871065088"&gt;tweeted&lt;/a&gt; to him,
asking for a workaround. Meanwhile, I looked at his dot-emacs, but wasn't able
to dig out what was needed to speed up things. He confirmed that his
performance was way better than what I was getting.
&lt;/p&gt;

&lt;p&gt;
First, I ruled out the possibility of it being because of the SSD, since
clearly my CPU usage was peaking, and the task was CPU bound and not I/O.
Next, I tried using the same file on a different machine (with a different
version of Emacs and org-mode), and it worked blazingly fast.  So, it was
either the version of Emacs or org-mode that I was using.
&lt;/p&gt;

&lt;p&gt;
I should have stopped, thought clearly, and started experimenting with org
version, but hindsight is 20-20.  I tried Ubuntu's pre-built Emacs and agendas
were fast!  I suspected my Emacs build, since I recently started building Emacs
from git.  I built two or three other versions of Emacs, and wasted a lot of
time, before realizing that I wasn't using the org-mode source bundled inside
Emacs for the tests, and there were two "independent" variables.
&lt;/p&gt;

&lt;p&gt;
Finally, I began bisecting org-mode's source and found that all hell broke
loose with an &lt;a href="http://orgmode.org/w/?p=org-mode.git;a=commitdiff;h=b88c5464db2cb0d90d4f30e43b5e08d2b1c1fcea;hp=8cc4e09950594b2abec2502e9218318570595ac5"&gt;inconspicuous change&lt;/a&gt; around release 8.2.6.  It turns out that
org-overview was broken before this, and collapsing all the trees in a newly
opened org-buffer (default option) wasn't working. Once this bug was fixed,
opening huge org files would slow down by a great deal, in turn causing agenda
generation to be unbearably slow.
&lt;/p&gt;

&lt;p&gt;
All I had to do was add a &lt;code&gt;#+STARTUP: showeverything&lt;/code&gt; to the top of the file.
This speeded up things by about 50 times!  It turns out, I later found out,
that all of this is documented on &lt;a href="http://orgmode.org/worg/agenda-optimization.html"&gt;Worg&lt;/a&gt;. I did try a few search engine queries,
but sadly none of them brought this up.  Adding the following to my config,
speeded up agenda generation by about 150-200 times!
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-agenda-inhibit-startup&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; ~50x speedup&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-agenda-use-tag-inheritance&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; 3-4x speedup&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In the course of all this debugging, I learnt how to use Emacs' profiler.  The
profile reports along with git bisect, eventually helped me figure out what the
problem was.
&lt;/p&gt;

&lt;p&gt;
To profile the CPU usage, all you have to do is add a call like
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;profiler-start&lt;/span&gt; &lt;span class="ss"&gt;'cpu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;;; or M-x profiler-start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
at the place where you wish to start it.  Emacs will then start collecting
information about where time is being spent, by sampling every
&lt;code&gt;sampling-interval&lt;/code&gt; seconds (default 10&lt;sup&gt;6&lt;/sup&gt; nanoseconds = 1 milli second).
&lt;/p&gt;

&lt;p&gt;
You can view the information being collected, at any point of time using
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;profiler-report&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; or M-x profiler-report&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The report is a nice, interactive tree with the percentage of time spent in
each call. You can stop profiling by calling &lt;code&gt;(profiler-stop)&lt;/code&gt;.  If you have
more than one report, you can compare them by hitting &lt;code&gt;=&lt;/code&gt; in one of the report
buffers.  I'm definitely going to use this for other things! (like speeding up
my startup?)
&lt;/p&gt;

&lt;p&gt;
Now that I have Memacs working with reasonably fast agenda views, I'm looking
forward to collecting as much personal information as I can!  Thanks Karl for
writing Memacs.  I am going to be a pretty heavy user, I think!  There seem to
be a few rough edges, though, and I hope to help smoothen them out a little
bit, over the next few weeks.
&lt;/p&gt;</description><category>emacs</category><category>orgmode</category><category>programming</category><guid>https://punchagan.muse-amuse.in/posts/how-i-learnt-to-use-emacs-profiler.html</guid><pubDate>Fri, 02 Jan 2015 20:31:17 GMT</pubDate></item><item><title>Jabber message queue</title><link>https://punchagan.muse-amuse.in/posts/jabber-message-queue.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I've always wanted to be able to queue up messages to send to friends, until I
go online the next time.  I tried using email instead of chat a few times, or
just ended up staying online with a busy status.
&lt;/p&gt;

&lt;p&gt;
Finally, now that I have started using jabber-mode for chatting from within
Emacs, I took out the time to write a "queuing system" for sending chat
messages, similar to the mail queue for smtpmail.  Instead of persisting sexps,
though, I persist the messages in a JSON format and the queue is flushed every
time I connect to jabber, in a &lt;code&gt;jabber-post-connect-hook&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
To make the interface as similar to the interface available when I am online, I
hacked completion for the to ID using email addresses in my address book
(&lt;code&gt;mu4e~contact-list&lt;/code&gt;).  I really like the fact that the chat buffer opens up,
and I can type and send messages like I usually do.  Hitting &lt;code&gt;RET&lt;/code&gt; after typing
a message queues it up, instead of trying to send it. Smooth!
&lt;/p&gt;

&lt;p&gt;
The code is in my &lt;a href="https://github.com/punchagan/dot-emacs/blob/master/punchagan.org#jabber"&gt;.emacs&lt;/a&gt;
&lt;/p&gt;</description><category>emacs</category><category>hack</category><guid>https://punchagan.muse-amuse.in/posts/jabber-message-queue.html</guid><pubDate>Tue, 09 Dec 2014 21:57:14 GMT</pubDate></item><item><title>Using tmux to "screen share"</title><link>https://punchagan.muse-amuse.in/posts/using-tmux-to-screen-share.html</link><dc:creator>punchagan</dc:creator><description>&lt;p&gt;
I wanted to pair with a friend of mine, exploring Magit mode in Emacs.  There
are a couple of projects to make it easy to use tmux(-like) to simplify this.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/non/pairing"&gt;pairing&lt;/a&gt; lets you share a screen and pair, on a common server where both the
users have access to.  But I wanted to use my machine, instead of the
server.
&lt;/li&gt;

&lt;li&gt;&lt;a href="http://tmate.io"&gt;tmate&lt;/a&gt; gets around the restriction of having a common server where both users
have access, but needs a custom install of tmux, and the use of a 3rd party
service.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I worked around this, using an ssh reverse tunnels.  Here are the steps, for
anyone who'd like to reproduce.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Add your partner(-in-crime)'s ssh key to authorized keys on a server that
has a public IP (&lt;code&gt;example.com&lt;/code&gt;, let's say).
&lt;/li&gt;

&lt;li&gt;Add your server's key to authorized keys on your local machine.
&lt;/li&gt;

&lt;li&gt;Create a reverse tunnel from your machine to the server.

&lt;div class="highlight"&gt;&lt;pre&gt;ssh -fNR 19999:localhost:22 server_user@example.com
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;-R 19999&lt;/code&gt; essentially forwards port 19999 on &lt;code&gt;example.com&lt;/code&gt; to
localhost's 22.  &lt;code&gt;-fN&lt;/code&gt; is to say no terminal, send connection to background.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;Your partner first ssh's to example.com and then ssh's to your laptop.

&lt;p&gt;
On your partner's machine
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;ssh server_user@example.com
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
On the server, your partner does
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh your_username@localhost -p 19999
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Your partner is on your machine, and can run &lt;code&gt;rm -rf&lt;/code&gt;!  But, hopefully
they'll only run &lt;code&gt;tmux attach&lt;/code&gt;.  Obviously, do this only with people you
trust!
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;Start a tmux session locally.
&lt;/li&gt;

&lt;li&gt;Profit!
&lt;/li&gt;
&lt;/ol&gt;</description><guid>https://punchagan.muse-amuse.in/posts/using-tmux-to-screen-share.html</guid><pubDate>Mon, 24 Nov 2014 13:08:21 GMT</pubDate></item></channel></rss>