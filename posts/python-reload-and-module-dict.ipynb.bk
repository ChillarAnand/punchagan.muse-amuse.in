{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I was trying to play around with Nikola's code today and learnt about a documented weirdness of Python reload.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import tempfile\n",
    "os.chdir(tempfile.mkdtemp())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ORIGINAL = \"# PLUGINS = []\"\n",
    "UPDATED = \"PLUGINS = ['rss']\"\n",
    "\n",
    "def create_conf_file(content):\n",
    "    with open('conf.py', 'w') as f:\n",
    "        f.write(content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'conf' has no attribute 'PLUGINS'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-3-d7ff66a0879b>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mcreate_conf_file\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mORIGINAL\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mconf\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mconf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mPLUGINS\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m: module 'conf' has no attribute 'PLUGINS'"
     ]
    }
   ],
   "source": [
    "create_conf_file(ORIGINAL)\n",
    "import conf\n",
    "print(conf.PLUGINS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'conf' has no attribute 'PLUGINS'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-4-4a094f90e737>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mcreate_conf_file\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mUPDATED\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mconf\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mconf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mPLUGINS\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m: module 'conf' has no attribute 'PLUGINS'"
     ]
    }
   ],
   "source": [
    "create_conf_file(UPDATED)\n",
    "import conf\n",
    "print(conf.PLUGINS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['rss']\n"
     ]
    }
   ],
   "source": [
    "import importlib\n",
    "importlib.reload(conf)\n",
    "print(conf.PLUGINS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['rss'] <---Whaaaat!\n"
     ]
    }
   ],
   "source": [
    "create_conf_file(ORIGINAL)\n",
    "import conf\n",
    "print(conf.PLUGINS, \"<---Whaaaat!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The behavior is well documented, along with a reasoning of why it is the way it is, but you can trip over it if you don't know. I hit a bug and was wondering if there was a race condition somewhere, until I read the docs for [reload](https://docs.python.org/3/library/importlib.html#importlib.reload).  On reload, the module dict is updated, instead of creating a new dict and any values not redefined in the new code for the module remain unchanged."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1+"
  },
  "nikola": {
   "category": "",
   "date": "2016-06-23 15:21:43 UTC+05:30",
   "description": "",
   "link": "",
   "slug": "python-reload-and-module-dict",
   "tags": "draft",
   "title": "Python reload and module dict",
   "type": "text"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
